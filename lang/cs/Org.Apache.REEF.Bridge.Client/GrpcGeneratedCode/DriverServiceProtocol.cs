// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DriverServiceProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Apache.REEF.Bridge.Proto {

  /// <summary>Holder for reflection information generated from DriverServiceProtocol.proto</summary>
  public static partial class DriverServiceProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for DriverServiceProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DriverServiceProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtEcml2ZXJTZXJ2aWNlUHJvdG9jb2wucHJvdG8SDGRyaXZlcmJyaWRnZRoa",
            "RHJpdmVyQ29tbW9uUHJvdG9jb2wucHJvdG8iNgoYRHJpdmVyQ2xpZW50UmVn",
            "aXN0cmF0aW9uEgwKBGhvc3QYASABKAkSDAoEcG9ydBgCIAEoBSK9AQoPUmVz",
            "b3VyY2VSZXF1ZXN0EhYKDm5vZGVfbmFtZV9saXN0GAEgAygJEhYKDnJhY2tf",
            "bmFtZV9saXN0GAIgAygJEhYKDnJlc291cmNlX2NvdW50GAMgASgFEhMKC21l",
            "bW9yeV9zaXplGAQgASgFEhAKCHByaW9yaXR5GAUgASgFEg0KBWNvcmVzGAYg",
            "ASgFEhYKDnJlbGF4X2xvY2FsaXR5GAcgASgIEhQKDHJ1bnRpbWVfbmFtZRgI",
            "IAEoCSI0CgxBbGFybVJlcXVlc3QSEAoIYWxhcm1faWQYASABKAkSEgoKdGlt",
            "ZW91dF9tcxgCIAEoAyJBCg9TaHV0ZG93blJlcXVlc3QSLgoJZXhjZXB0aW9u",
            "GAEgASgLMhsuZHJpdmVyYnJpZGdlLkV4Y2VwdGlvbkluZm8iswMKGUFsbG9j",
            "YXRlZEV2YWx1YXRvclJlcXVlc3QSFAoMZXZhbHVhdG9yX2lkGAEgASgJEhcK",
            "D2Nsb3NlX2V2YWx1YXRvchgCIAEoCBIRCglhZGRfZmlsZXMYAyADKAkSFQoN",
            "YWRkX2xpYnJhcmllcxgEIAMoCRIfChdldmFsdWF0b3JfY29uZmlndXJhdGlv",
            "bhgFIAEoCRIdChVjb250ZXh0X2NvbmZpZ3VyYXRpb24YBiABKAkSGgoSdGFz",
            "a19jb25maWd1cmF0aW9uGAcgASgJElQKC3NldF9wcm9jZXNzGAggASgLMj8u",
            "ZHJpdmVyYnJpZGdlLkFsbG9jYXRlZEV2YWx1YXRvclJlcXVlc3QuRXZhbHVh",
            "dG9yUHJvY2Vzc1JlcXVlc3QaigEKF0V2YWx1YXRvclByb2Nlc3NSZXF1ZXN0",
            "EhEKCW1lbW9yeV9tYhgBIAEoBRIfChdjb25maWd1cmF0aW9uX2ZpbGVfbmFt",
            "ZRgCIAEoCRIUCgxzdGFuZGFyZF9vdXQYAyABKAkSFAoMc3RhbmRhcmRfZXJy",
            "GAQgASgJEg8KB29wdGlvbnMYBSADKAkingEKFEFjdGl2ZUNvbnRleHRSZXF1",
            "ZXN0EhIKCmNvbnRleHRfaWQYASABKAkSFwoNY2xvc2VfY29udGV4dBgCIAEo",
            "CEgAEhEKB21lc3NhZ2UYAyABKAxIABIdChNuZXdfY29udGV4dF9yZXF1ZXN0",
            "GAQgASgJSAASGgoQbmV3X3Rhc2tfcmVxdWVzdBgFIAEoCUgAQgsKCW9wZXJh",
            "dGlvbiJKChJSdW5uaW5nVGFza1JlcXVlc3QSDwoHdGFza19pZBgBIAEoCRIS",
            "CgpjbG9zZV90YXNrGAIgASgIEg8KB21lc3NhZ2UYAyABKAwymgQKDURyaXZl",
            "clNlcnZpY2USVAoUUmVnaXN0ZXJEcml2ZXJDbGllbnQSJi5kcml2ZXJicmlk",
            "Z2UuRHJpdmVyQ2xpZW50UmVnaXN0cmF0aW9uGhIuZHJpdmVyYnJpZGdlLlZv",
            "aWQiABJHChBSZXF1ZXN0UmVzb3VyY2VzEh0uZHJpdmVyYnJpZGdlLlJlc291",
            "cmNlUmVxdWVzdBoSLmRyaXZlcmJyaWRnZS5Wb2lkIgASPwoIU2h1dGRvd24S",
            "HS5kcml2ZXJicmlkZ2UuU2h1dGRvd25SZXF1ZXN0GhIuZHJpdmVyYnJpZGdl",
            "LlZvaWQiABI8CghTZXRBbGFybRIaLmRyaXZlcmJyaWRnZS5BbGFybVJlcXVl",
            "c3QaEi5kcml2ZXJicmlkZ2UuVm9pZCIAElUKFEFsbG9jYXRlZEV2YWx1YXRv",
            "ck9wEicuZHJpdmVyYnJpZGdlLkFsbG9jYXRlZEV2YWx1YXRvclJlcXVlc3Qa",
            "Ei5kcml2ZXJicmlkZ2UuVm9pZCIAEksKD0FjdGl2ZUNvbnRleHRPcBIiLmRy",
            "aXZlcmJyaWRnZS5BY3RpdmVDb250ZXh0UmVxdWVzdBoSLmRyaXZlcmJyaWRn",
            "ZS5Wb2lkIgASRwoNUnVubmluZ1Rhc2tPcBIgLmRyaXZlcmJyaWRnZS5SdW5u",
            "aW5nVGFza1JlcXVlc3QaEi5kcml2ZXJicmlkZ2UuVm9pZCIAQlUKHG9yZy5h",
            "cGFjaGUucmVlZi5icmlkZ2UucHJvdG9CFERyaXZlckJyaWRnZVByb3RvY29s",
            "UAGqAhxPcmcuQXBhY2hlLlJFRUYuQnJpZGdlLlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Org.Apache.REEF.Bridge.Proto.DriverCommonProtocolReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration), global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration.Parser, new[]{ "Host", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.ResourceRequest), global::Org.Apache.REEF.Bridge.Proto.ResourceRequest.Parser, new[]{ "NodeNameList", "RackNameList", "ResourceCount", "MemorySize", "Priority", "Cores", "RelaxLocality", "RuntimeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.AlarmRequest), global::Org.Apache.REEF.Bridge.Proto.AlarmRequest.Parser, new[]{ "AlarmId", "TimeoutMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest), global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest.Parser, new[]{ "Exception" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest), global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest.Parser, new[]{ "EvaluatorId", "CloseEvaluator", "AddFiles", "AddLibraries", "EvaluatorConfiguration", "ContextConfiguration", "TaskConfiguration", "SetProcess" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest.Types.EvaluatorProcessRequest), global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest.Types.EvaluatorProcessRequest.Parser, new[]{ "MemoryMb", "ConfigurationFileName", "StandardOut", "StandardErr", "Options" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest), global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest.Parser, new[]{ "ContextId", "CloseContext", "Message", "NewContextRequest", "NewTaskRequest" }, new[]{ "Operation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest), global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest.Parser, new[]{ "TaskId", "CloseTask", "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DriverClientRegistration : pb::IMessage<DriverClientRegistration> {
    private static readonly pb::MessageParser<DriverClientRegistration> _parser = new pb::MessageParser<DriverClientRegistration>(() => new DriverClientRegistration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriverClientRegistration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverServiceProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverClientRegistration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverClientRegistration(DriverClientRegistration other) : this() {
      host_ = other.host_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverClientRegistration Clone() {
      return new DriverClientRegistration(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    /// <summary>
    /// The client's host
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    /// <summary>
    /// The client's server port
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriverClientRegistration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriverClientRegistration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriverClientRegistration other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing resource request.
  /// </summary>
  public sealed partial class ResourceRequest : pb::IMessage<ResourceRequest> {
    private static readonly pb::MessageParser<ResourceRequest> _parser = new pb::MessageParser<ResourceRequest>(() => new ResourceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverServiceProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceRequest(ResourceRequest other) : this() {
      nodeNameList_ = other.nodeNameList_.Clone();
      rackNameList_ = other.rackNameList_.Clone();
      resourceCount_ = other.resourceCount_;
      memorySize_ = other.memorySize_;
      priority_ = other.priority_;
      cores_ = other.cores_;
      relaxLocality_ = other.relaxLocality_;
      runtimeName_ = other.runtimeName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceRequest Clone() {
      return new ResourceRequest(this);
    }

    /// <summary>Field number for the "node_name_list" field.</summary>
    public const int NodeNameListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_nodeNameList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> nodeNameList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NodeNameList {
      get { return nodeNameList_; }
    }

    /// <summary>Field number for the "rack_name_list" field.</summary>
    public const int RackNameListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_rackNameList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> rackNameList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RackNameList {
      get { return rackNameList_; }
    }

    /// <summary>Field number for the "resource_count" field.</summary>
    public const int ResourceCountFieldNumber = 3;
    private int resourceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResourceCount {
      get { return resourceCount_; }
      set {
        resourceCount_ = value;
      }
    }

    /// <summary>Field number for the "memory_size" field.</summary>
    public const int MemorySizeFieldNumber = 4;
    private int memorySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemorySize {
      get { return memorySize_; }
      set {
        memorySize_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 5;
    private int priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "cores" field.</summary>
    public const int CoresFieldNumber = 6;
    private int cores_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cores {
      get { return cores_; }
      set {
        cores_ = value;
      }
    }

    /// <summary>Field number for the "relax_locality" field.</summary>
    public const int RelaxLocalityFieldNumber = 7;
    private bool relaxLocality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RelaxLocality {
      get { return relaxLocality_; }
      set {
        relaxLocality_ = value;
      }
    }

    /// <summary>Field number for the "runtime_name" field.</summary>
    public const int RuntimeNameFieldNumber = 8;
    private string runtimeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeName {
      get { return runtimeName_; }
      set {
        runtimeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeNameList_.Equals(other.nodeNameList_)) return false;
      if(!rackNameList_.Equals(other.rackNameList_)) return false;
      if (ResourceCount != other.ResourceCount) return false;
      if (MemorySize != other.MemorySize) return false;
      if (Priority != other.Priority) return false;
      if (Cores != other.Cores) return false;
      if (RelaxLocality != other.RelaxLocality) return false;
      if (RuntimeName != other.RuntimeName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeNameList_.GetHashCode();
      hash ^= rackNameList_.GetHashCode();
      if (ResourceCount != 0) hash ^= ResourceCount.GetHashCode();
      if (MemorySize != 0) hash ^= MemorySize.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Cores != 0) hash ^= Cores.GetHashCode();
      if (RelaxLocality != false) hash ^= RelaxLocality.GetHashCode();
      if (RuntimeName.Length != 0) hash ^= RuntimeName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeNameList_.WriteTo(output, _repeated_nodeNameList_codec);
      rackNameList_.WriteTo(output, _repeated_rackNameList_codec);
      if (ResourceCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResourceCount);
      }
      if (MemorySize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MemorySize);
      }
      if (Priority != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Priority);
      }
      if (Cores != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Cores);
      }
      if (RelaxLocality != false) {
        output.WriteRawTag(56);
        output.WriteBool(RelaxLocality);
      }
      if (RuntimeName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RuntimeName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeNameList_.CalculateSize(_repeated_nodeNameList_codec);
      size += rackNameList_.CalculateSize(_repeated_rackNameList_codec);
      if (ResourceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResourceCount);
      }
      if (MemorySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemorySize);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (Cores != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cores);
      }
      if (RelaxLocality != false) {
        size += 1 + 1;
      }
      if (RuntimeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceRequest other) {
      if (other == null) {
        return;
      }
      nodeNameList_.Add(other.nodeNameList_);
      rackNameList_.Add(other.rackNameList_);
      if (other.ResourceCount != 0) {
        ResourceCount = other.ResourceCount;
      }
      if (other.MemorySize != 0) {
        MemorySize = other.MemorySize;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Cores != 0) {
        Cores = other.Cores;
      }
      if (other.RelaxLocality != false) {
        RelaxLocality = other.RelaxLocality;
      }
      if (other.RuntimeName.Length != 0) {
        RuntimeName = other.RuntimeName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodeNameList_.AddEntriesFrom(input, _repeated_nodeNameList_codec);
            break;
          }
          case 18: {
            rackNameList_.AddEntriesFrom(input, _repeated_rackNameList_codec);
            break;
          }
          case 24: {
            ResourceCount = input.ReadInt32();
            break;
          }
          case 32: {
            MemorySize = input.ReadInt32();
            break;
          }
          case 40: {
            Priority = input.ReadInt32();
            break;
          }
          case 48: {
            Cores = input.ReadInt32();
            break;
          }
          case 56: {
            RelaxLocality = input.ReadBool();
            break;
          }
          case 66: {
            RuntimeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for an alarm to be set
  /// </summary>
  public sealed partial class AlarmRequest : pb::IMessage<AlarmRequest> {
    private static readonly pb::MessageParser<AlarmRequest> _parser = new pb::MessageParser<AlarmRequest>(() => new AlarmRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlarmRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverServiceProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmRequest(AlarmRequest other) : this() {
      alarmId_ = other.alarmId_;
      timeoutMs_ = other.timeoutMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmRequest Clone() {
      return new AlarmRequest(this);
    }

    /// <summary>Field number for the "alarm_id" field.</summary>
    public const int AlarmIdFieldNumber = 1;
    private string alarmId_ = "";
    /// <summary>
    /// used to uniquely identify the alarm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlarmId {
      get { return alarmId_; }
      set {
        alarmId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeout_ms" field.</summary>
    public const int TimeoutMsFieldNumber = 2;
    private long timeoutMs_;
    /// <summary>
    /// timeout in milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeoutMs {
      get { return timeoutMs_; }
      set {
        timeoutMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlarmRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlarmRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlarmId != other.AlarmId) return false;
      if (TimeoutMs != other.TimeoutMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlarmId.Length != 0) hash ^= AlarmId.GetHashCode();
      if (TimeoutMs != 0L) hash ^= TimeoutMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AlarmId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AlarmId);
      }
      if (TimeoutMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeoutMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlarmId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlarmId);
      }
      if (TimeoutMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeoutMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlarmRequest other) {
      if (other == null) {
        return;
      }
      if (other.AlarmId.Length != 0) {
        AlarmId = other.AlarmId;
      }
      if (other.TimeoutMs != 0L) {
        TimeoutMs = other.TimeoutMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AlarmId = input.ReadString();
            break;
          }
          case 16: {
            TimeoutMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShutdownRequest : pb::IMessage<ShutdownRequest> {
    private static readonly pb::MessageParser<ShutdownRequest> _parser = new pb::MessageParser<ShutdownRequest>(() => new ShutdownRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShutdownRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverServiceProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShutdownRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShutdownRequest(ShutdownRequest other) : this() {
      Exception = other.exception_ != null ? other.Exception.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShutdownRequest Clone() {
      return new ShutdownRequest(this);
    }

    /// <summary>Field number for the "exception" field.</summary>
    public const int ExceptionFieldNumber = 1;
    private global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo exception_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo Exception {
      get { return exception_; }
      set {
        exception_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShutdownRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShutdownRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Exception, other.Exception)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (exception_ != null) hash ^= Exception.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (exception_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Exception);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (exception_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exception);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShutdownRequest other) {
      if (other == null) {
        return;
      }
      if (other.exception_ != null) {
        if (exception_ == null) {
          exception_ = new global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo();
        }
        Exception.MergeFrom(other.Exception);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (exception_ == null) {
              exception_ = new global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo();
            }
            input.ReadMessage(exception_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllocatedEvaluatorRequest : pb::IMessage<AllocatedEvaluatorRequest> {
    private static readonly pb::MessageParser<AllocatedEvaluatorRequest> _parser = new pb::MessageParser<AllocatedEvaluatorRequest>(() => new AllocatedEvaluatorRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllocatedEvaluatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverServiceProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocatedEvaluatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocatedEvaluatorRequest(AllocatedEvaluatorRequest other) : this() {
      evaluatorId_ = other.evaluatorId_;
      closeEvaluator_ = other.closeEvaluator_;
      addFiles_ = other.addFiles_.Clone();
      addLibraries_ = other.addLibraries_.Clone();
      evaluatorConfiguration_ = other.evaluatorConfiguration_;
      contextConfiguration_ = other.contextConfiguration_;
      taskConfiguration_ = other.taskConfiguration_;
      SetProcess = other.setProcess_ != null ? other.SetProcess.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocatedEvaluatorRequest Clone() {
      return new AllocatedEvaluatorRequest(this);
    }

    /// <summary>Field number for the "evaluator_id" field.</summary>
    public const int EvaluatorIdFieldNumber = 1;
    private string evaluatorId_ = "";
    /// <summary>
    /// The evaluator used to submit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EvaluatorId {
      get { return evaluatorId_; }
      set {
        evaluatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close_evaluator" field.</summary>
    public const int CloseEvaluatorFieldNumber = 2;
    private bool closeEvaluator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CloseEvaluator {
      get { return closeEvaluator_; }
      set {
        closeEvaluator_ = value;
      }
    }

    /// <summary>Field number for the "add_files" field.</summary>
    public const int AddFilesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_addFiles_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> addFiles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AddFiles {
      get { return addFiles_; }
    }

    /// <summary>Field number for the "add_libraries" field.</summary>
    public const int AddLibrariesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_addLibraries_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> addLibraries_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AddLibraries {
      get { return addLibraries_; }
    }

    /// <summary>Field number for the "evaluator_configuration" field.</summary>
    public const int EvaluatorConfigurationFieldNumber = 5;
    private string evaluatorConfiguration_ = "";
    /// <summary>
    /// Evaluator configuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EvaluatorConfiguration {
      get { return evaluatorConfiguration_; }
      set {
        evaluatorConfiguration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context_configuration" field.</summary>
    public const int ContextConfigurationFieldNumber = 6;
    private string contextConfiguration_ = "";
    /// <summary>
    /// Context configuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextConfiguration {
      get { return contextConfiguration_; }
      set {
        contextConfiguration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "task_configuration" field.</summary>
    public const int TaskConfigurationFieldNumber = 7;
    private string taskConfiguration_ = "";
    /// <summary>
    /// Task configuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskConfiguration {
      get { return taskConfiguration_; }
      set {
        taskConfiguration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "set_process" field.</summary>
    public const int SetProcessFieldNumber = 8;
    private global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest.Types.EvaluatorProcessRequest setProcess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest.Types.EvaluatorProcessRequest SetProcess {
      get { return setProcess_; }
      set {
        setProcess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllocatedEvaluatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllocatedEvaluatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EvaluatorId != other.EvaluatorId) return false;
      if (CloseEvaluator != other.CloseEvaluator) return false;
      if(!addFiles_.Equals(other.addFiles_)) return false;
      if(!addLibraries_.Equals(other.addLibraries_)) return false;
      if (EvaluatorConfiguration != other.EvaluatorConfiguration) return false;
      if (ContextConfiguration != other.ContextConfiguration) return false;
      if (TaskConfiguration != other.TaskConfiguration) return false;
      if (!object.Equals(SetProcess, other.SetProcess)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EvaluatorId.Length != 0) hash ^= EvaluatorId.GetHashCode();
      if (CloseEvaluator != false) hash ^= CloseEvaluator.GetHashCode();
      hash ^= addFiles_.GetHashCode();
      hash ^= addLibraries_.GetHashCode();
      if (EvaluatorConfiguration.Length != 0) hash ^= EvaluatorConfiguration.GetHashCode();
      if (ContextConfiguration.Length != 0) hash ^= ContextConfiguration.GetHashCode();
      if (TaskConfiguration.Length != 0) hash ^= TaskConfiguration.GetHashCode();
      if (setProcess_ != null) hash ^= SetProcess.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EvaluatorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EvaluatorId);
      }
      if (CloseEvaluator != false) {
        output.WriteRawTag(16);
        output.WriteBool(CloseEvaluator);
      }
      addFiles_.WriteTo(output, _repeated_addFiles_codec);
      addLibraries_.WriteTo(output, _repeated_addLibraries_codec);
      if (EvaluatorConfiguration.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EvaluatorConfiguration);
      }
      if (ContextConfiguration.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ContextConfiguration);
      }
      if (TaskConfiguration.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TaskConfiguration);
      }
      if (setProcess_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SetProcess);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EvaluatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EvaluatorId);
      }
      if (CloseEvaluator != false) {
        size += 1 + 1;
      }
      size += addFiles_.CalculateSize(_repeated_addFiles_codec);
      size += addLibraries_.CalculateSize(_repeated_addLibraries_codec);
      if (EvaluatorConfiguration.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EvaluatorConfiguration);
      }
      if (ContextConfiguration.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextConfiguration);
      }
      if (TaskConfiguration.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskConfiguration);
      }
      if (setProcess_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetProcess);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllocatedEvaluatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.EvaluatorId.Length != 0) {
        EvaluatorId = other.EvaluatorId;
      }
      if (other.CloseEvaluator != false) {
        CloseEvaluator = other.CloseEvaluator;
      }
      addFiles_.Add(other.addFiles_);
      addLibraries_.Add(other.addLibraries_);
      if (other.EvaluatorConfiguration.Length != 0) {
        EvaluatorConfiguration = other.EvaluatorConfiguration;
      }
      if (other.ContextConfiguration.Length != 0) {
        ContextConfiguration = other.ContextConfiguration;
      }
      if (other.TaskConfiguration.Length != 0) {
        TaskConfiguration = other.TaskConfiguration;
      }
      if (other.setProcess_ != null) {
        if (setProcess_ == null) {
          setProcess_ = new global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest.Types.EvaluatorProcessRequest();
        }
        SetProcess.MergeFrom(other.SetProcess);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EvaluatorId = input.ReadString();
            break;
          }
          case 16: {
            CloseEvaluator = input.ReadBool();
            break;
          }
          case 26: {
            addFiles_.AddEntriesFrom(input, _repeated_addFiles_codec);
            break;
          }
          case 34: {
            addLibraries_.AddEntriesFrom(input, _repeated_addLibraries_codec);
            break;
          }
          case 42: {
            EvaluatorConfiguration = input.ReadString();
            break;
          }
          case 50: {
            ContextConfiguration = input.ReadString();
            break;
          }
          case 58: {
            TaskConfiguration = input.ReadString();
            break;
          }
          case 66: {
            if (setProcess_ == null) {
              setProcess_ = new global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest.Types.EvaluatorProcessRequest();
            }
            input.ReadMessage(setProcess_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AllocatedEvaluatorRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EvaluatorProcessRequest : pb::IMessage<EvaluatorProcessRequest> {
        private static readonly pb::MessageParser<EvaluatorProcessRequest> _parser = new pb::MessageParser<EvaluatorProcessRequest>(() => new EvaluatorProcessRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EvaluatorProcessRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EvaluatorProcessRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EvaluatorProcessRequest(EvaluatorProcessRequest other) : this() {
          memoryMb_ = other.memoryMb_;
          configurationFileName_ = other.configurationFileName_;
          standardOut_ = other.standardOut_;
          standardErr_ = other.standardErr_;
          options_ = other.options_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EvaluatorProcessRequest Clone() {
          return new EvaluatorProcessRequest(this);
        }

        /// <summary>Field number for the "memory_mb" field.</summary>
        public const int MemoryMbFieldNumber = 1;
        private int memoryMb_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MemoryMb {
          get { return memoryMb_; }
          set {
            memoryMb_ = value;
          }
        }

        /// <summary>Field number for the "configuration_file_name" field.</summary>
        public const int ConfigurationFileNameFieldNumber = 2;
        private string configurationFileName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConfigurationFileName {
          get { return configurationFileName_; }
          set {
            configurationFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "standard_out" field.</summary>
        public const int StandardOutFieldNumber = 3;
        private string standardOut_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StandardOut {
          get { return standardOut_; }
          set {
            standardOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "standard_err" field.</summary>
        public const int StandardErrFieldNumber = 4;
        private string standardErr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StandardErr {
          get { return standardErr_; }
          set {
            standardErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "options" field.</summary>
        public const int OptionsFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _repeated_options_codec
            = pb::FieldCodec.ForString(42);
        private readonly pbc::RepeatedField<string> options_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Options {
          get { return options_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EvaluatorProcessRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EvaluatorProcessRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MemoryMb != other.MemoryMb) return false;
          if (ConfigurationFileName != other.ConfigurationFileName) return false;
          if (StandardOut != other.StandardOut) return false;
          if (StandardErr != other.StandardErr) return false;
          if(!options_.Equals(other.options_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MemoryMb != 0) hash ^= MemoryMb.GetHashCode();
          if (ConfigurationFileName.Length != 0) hash ^= ConfigurationFileName.GetHashCode();
          if (StandardOut.Length != 0) hash ^= StandardOut.GetHashCode();
          if (StandardErr.Length != 0) hash ^= StandardErr.GetHashCode();
          hash ^= options_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MemoryMb != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MemoryMb);
          }
          if (ConfigurationFileName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ConfigurationFileName);
          }
          if (StandardOut.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(StandardOut);
          }
          if (StandardErr.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(StandardErr);
          }
          options_.WriteTo(output, _repeated_options_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MemoryMb != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemoryMb);
          }
          if (ConfigurationFileName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigurationFileName);
          }
          if (StandardOut.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StandardOut);
          }
          if (StandardErr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StandardErr);
          }
          size += options_.CalculateSize(_repeated_options_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EvaluatorProcessRequest other) {
          if (other == null) {
            return;
          }
          if (other.MemoryMb != 0) {
            MemoryMb = other.MemoryMb;
          }
          if (other.ConfigurationFileName.Length != 0) {
            ConfigurationFileName = other.ConfigurationFileName;
          }
          if (other.StandardOut.Length != 0) {
            StandardOut = other.StandardOut;
          }
          if (other.StandardErr.Length != 0) {
            StandardErr = other.StandardErr;
          }
          options_.Add(other.options_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                MemoryMb = input.ReadInt32();
                break;
              }
              case 18: {
                ConfigurationFileName = input.ReadString();
                break;
              }
              case 26: {
                StandardOut = input.ReadString();
                break;
              }
              case 34: {
                StandardErr = input.ReadString();
                break;
              }
              case 42: {
                options_.AddEntriesFrom(input, _repeated_options_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ActiveContextRequest : pb::IMessage<ActiveContextRequest> {
    private static readonly pb::MessageParser<ActiveContextRequest> _parser = new pb::MessageParser<ActiveContextRequest>(() => new ActiveContextRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveContextRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverServiceProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveContextRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveContextRequest(ActiveContextRequest other) : this() {
      contextId_ = other.contextId_;
      switch (other.OperationCase) {
        case OperationOneofCase.CloseContext:
          CloseContext = other.CloseContext;
          break;
        case OperationOneofCase.Message:
          Message = other.Message;
          break;
        case OperationOneofCase.NewContextRequest:
          NewContextRequest = other.NewContextRequest;
          break;
        case OperationOneofCase.NewTaskRequest:
          NewTaskRequest = other.NewTaskRequest;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveContextRequest Clone() {
      return new ActiveContextRequest(this);
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 1;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close_context" field.</summary>
    public const int CloseContextFieldNumber = 2;
    /// <summary>
    /// close the context
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CloseContext {
      get { return operationCase_ == OperationOneofCase.CloseContext ? (bool) operation_ : false; }
      set {
        operation_ = value;
        operationCase_ = OperationOneofCase.CloseContext;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    /// <summary>
    /// send message to the context
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return operationCase_ == OperationOneofCase.Message ? (pb::ByteString) operation_ : pb::ByteString.Empty; }
      set {
        operation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        operationCase_ = OperationOneofCase.Message;
      }
    }

    /// <summary>Field number for the "new_context_request" field.</summary>
    public const int NewContextRequestFieldNumber = 4;
    /// <summary>
    /// create a child context
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewContextRequest {
      get { return operationCase_ == OperationOneofCase.NewContextRequest ? (string) operation_ : ""; }
      set {
        operation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        operationCase_ = OperationOneofCase.NewContextRequest;
      }
    }

    /// <summary>Field number for the "new_task_request" field.</summary>
    public const int NewTaskRequestFieldNumber = 5;
    /// <summary>
    /// launch a task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewTaskRequest {
      get { return operationCase_ == OperationOneofCase.NewTaskRequest ? (string) operation_ : ""; }
      set {
        operation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        operationCase_ = OperationOneofCase.NewTaskRequest;
      }
    }

    private object operation_;
    /// <summary>Enum of possible cases for the "operation" oneof.</summary>
    public enum OperationOneofCase {
      None = 0,
      CloseContext = 2,
      Message = 3,
      NewContextRequest = 4,
      NewTaskRequest = 5,
    }
    private OperationOneofCase operationCase_ = OperationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationOneofCase OperationCase {
      get { return operationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOperation() {
      operationCase_ = OperationOneofCase.None;
      operation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveContextRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveContextRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextId != other.ContextId) return false;
      if (CloseContext != other.CloseContext) return false;
      if (Message != other.Message) return false;
      if (NewContextRequest != other.NewContextRequest) return false;
      if (NewTaskRequest != other.NewTaskRequest) return false;
      if (OperationCase != other.OperationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (operationCase_ == OperationOneofCase.CloseContext) hash ^= CloseContext.GetHashCode();
      if (operationCase_ == OperationOneofCase.Message) hash ^= Message.GetHashCode();
      if (operationCase_ == OperationOneofCase.NewContextRequest) hash ^= NewContextRequest.GetHashCode();
      if (operationCase_ == OperationOneofCase.NewTaskRequest) hash ^= NewTaskRequest.GetHashCode();
      hash ^= (int) operationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContextId);
      }
      if (operationCase_ == OperationOneofCase.CloseContext) {
        output.WriteRawTag(16);
        output.WriteBool(CloseContext);
      }
      if (operationCase_ == OperationOneofCase.Message) {
        output.WriteRawTag(26);
        output.WriteBytes(Message);
      }
      if (operationCase_ == OperationOneofCase.NewContextRequest) {
        output.WriteRawTag(34);
        output.WriteString(NewContextRequest);
      }
      if (operationCase_ == OperationOneofCase.NewTaskRequest) {
        output.WriteRawTag(42);
        output.WriteString(NewTaskRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (operationCase_ == OperationOneofCase.CloseContext) {
        size += 1 + 1;
      }
      if (operationCase_ == OperationOneofCase.Message) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      if (operationCase_ == OperationOneofCase.NewContextRequest) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewContextRequest);
      }
      if (operationCase_ == OperationOneofCase.NewTaskRequest) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewTaskRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveContextRequest other) {
      if (other == null) {
        return;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      switch (other.OperationCase) {
        case OperationOneofCase.CloseContext:
          CloseContext = other.CloseContext;
          break;
        case OperationOneofCase.Message:
          Message = other.Message;
          break;
        case OperationOneofCase.NewContextRequest:
          NewContextRequest = other.NewContextRequest;
          break;
        case OperationOneofCase.NewTaskRequest:
          NewTaskRequest = other.NewTaskRequest;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ContextId = input.ReadString();
            break;
          }
          case 16: {
            CloseContext = input.ReadBool();
            break;
          }
          case 26: {
            Message = input.ReadBytes();
            break;
          }
          case 34: {
            NewContextRequest = input.ReadString();
            break;
          }
          case 42: {
            NewTaskRequest = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunningTaskRequest : pb::IMessage<RunningTaskRequest> {
    private static readonly pb::MessageParser<RunningTaskRequest> _parser = new pb::MessageParser<RunningTaskRequest>(() => new RunningTaskRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunningTaskRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverServiceProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunningTaskRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunningTaskRequest(RunningTaskRequest other) : this() {
      taskId_ = other.taskId_;
      closeTask_ = other.closeTask_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunningTaskRequest Clone() {
      return new RunningTaskRequest(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close_task" field.</summary>
    public const int CloseTaskFieldNumber = 2;
    private bool closeTask_;
    /// <summary>
    /// close the task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CloseTask {
      get { return closeTask_; }
      set {
        closeTask_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    /// send task a message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunningTaskRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunningTaskRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (CloseTask != other.CloseTask) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (CloseTask != false) hash ^= CloseTask.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (CloseTask != false) {
        output.WriteRawTag(16);
        output.WriteBool(CloseTask);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (CloseTask != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunningTaskRequest other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.CloseTask != false) {
        CloseTask = other.CloseTask;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 16: {
            CloseTask = input.ReadBool();
            break;
          }
          case 26: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
