// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DriverServiceProtocol.proto
// </auto-generated>
// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Org.Apache.REEF.Bridge.Proto {
  /// <summary>
  /// The java driver service definition.
  /// </summary>
  public static partial class DriverService
  {
    static readonly string __ServiceName = "driverbridge.DriverService";

    static readonly grpc::Marshaller<global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration> __Marshaller_DriverClientRegistration = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Apache.REEF.Bridge.Proto.Void> __Marshaller_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Apache.REEF.Bridge.Proto.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Apache.REEF.Bridge.Proto.ResourceRequest> __Marshaller_ResourceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Apache.REEF.Bridge.Proto.ResourceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest> __Marshaller_ShutdownRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Apache.REEF.Bridge.Proto.AlarmRequest> __Marshaller_AlarmRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Apache.REEF.Bridge.Proto.AlarmRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest> __Marshaller_AllocatedEvaluatorRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest> __Marshaller_ActiveContextRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest> __Marshaller_RunningTaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration, global::Org.Apache.REEF.Bridge.Proto.Void> __Method_RegisterDriverClient = new grpc::Method<global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration, global::Org.Apache.REEF.Bridge.Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterDriverClient",
        __Marshaller_DriverClientRegistration,
        __Marshaller_Void);

    static readonly grpc::Method<global::Org.Apache.REEF.Bridge.Proto.ResourceRequest, global::Org.Apache.REEF.Bridge.Proto.Void> __Method_RequestResources = new grpc::Method<global::Org.Apache.REEF.Bridge.Proto.ResourceRequest, global::Org.Apache.REEF.Bridge.Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestResources",
        __Marshaller_ResourceRequest,
        __Marshaller_Void);

    static readonly grpc::Method<global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest, global::Org.Apache.REEF.Bridge.Proto.Void> __Method_Shutdown = new grpc::Method<global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest, global::Org.Apache.REEF.Bridge.Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Shutdown",
        __Marshaller_ShutdownRequest,
        __Marshaller_Void);

    static readonly grpc::Method<global::Org.Apache.REEF.Bridge.Proto.AlarmRequest, global::Org.Apache.REEF.Bridge.Proto.Void> __Method_SetAlarm = new grpc::Method<global::Org.Apache.REEF.Bridge.Proto.AlarmRequest, global::Org.Apache.REEF.Bridge.Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAlarm",
        __Marshaller_AlarmRequest,
        __Marshaller_Void);

    static readonly grpc::Method<global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest, global::Org.Apache.REEF.Bridge.Proto.Void> __Method_AllocatedEvaluatorOp = new grpc::Method<global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest, global::Org.Apache.REEF.Bridge.Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AllocatedEvaluatorOp",
        __Marshaller_AllocatedEvaluatorRequest,
        __Marshaller_Void);

    static readonly grpc::Method<global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest, global::Org.Apache.REEF.Bridge.Proto.Void> __Method_ActiveContextOp = new grpc::Method<global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest, global::Org.Apache.REEF.Bridge.Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActiveContextOp",
        __Marshaller_ActiveContextRequest,
        __Marshaller_Void);

    static readonly grpc::Method<global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest, global::Org.Apache.REEF.Bridge.Proto.Void> __Method_RunningTaskOp = new grpc::Method<global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest, global::Org.Apache.REEF.Bridge.Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RunningTaskOp",
        __Marshaller_RunningTaskRequest,
        __Marshaller_Void);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverServiceProtocolReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DriverService</summary>
    public abstract partial class DriverServiceBase
    {
      /// <summary>
      /// Driver client registration
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Apache.REEF.Bridge.Proto.Void> RegisterDriverClient(global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request for resources
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Apache.REEF.Bridge.Proto.Void> RequestResources(global::Org.Apache.REEF.Bridge.Proto.ResourceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request system shutdown
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Apache.REEF.Bridge.Proto.Void> Shutdown(global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request for setting an alarm
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Apache.REEF.Bridge.Proto.Void> SetAlarm(global::Org.Apache.REEF.Bridge.Proto.AlarmRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request operation on an allocated evaluator
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Apache.REEF.Bridge.Proto.Void> AllocatedEvaluatorOp(global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request operation on an active context
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Apache.REEF.Bridge.Proto.Void> ActiveContextOp(global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request operation on a running task
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Apache.REEF.Bridge.Proto.Void> RunningTaskOp(global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DriverService</summary>
    public partial class DriverServiceClient : grpc::ClientBase<DriverServiceClient>
    {
      /// <summary>Creates a new client for DriverService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DriverServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DriverService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DriverServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DriverServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DriverServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Driver client registration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void RegisterDriverClient(global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterDriverClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Driver client registration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void RegisterDriverClient(global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterDriverClient, null, options, request);
      }
      /// <summary>
      /// Driver client registration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> RegisterDriverClientAsync(global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterDriverClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Driver client registration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> RegisterDriverClientAsync(global::Org.Apache.REEF.Bridge.Proto.DriverClientRegistration request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterDriverClient, null, options, request);
      }
      /// <summary>
      /// Request for resources
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void RequestResources(global::Org.Apache.REEF.Bridge.Proto.ResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestResources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request for resources
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void RequestResources(global::Org.Apache.REEF.Bridge.Proto.ResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestResources, null, options, request);
      }
      /// <summary>
      /// Request for resources
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> RequestResourcesAsync(global::Org.Apache.REEF.Bridge.Proto.ResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestResourcesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request for resources
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> RequestResourcesAsync(global::Org.Apache.REEF.Bridge.Proto.ResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestResources, null, options, request);
      }
      /// <summary>
      /// Request system shutdown
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void Shutdown(global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Shutdown(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request system shutdown
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void Shutdown(global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Shutdown, null, options, request);
      }
      /// <summary>
      /// Request system shutdown
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> ShutdownAsync(global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShutdownAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request system shutdown
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> ShutdownAsync(global::Org.Apache.REEF.Bridge.Proto.ShutdownRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Shutdown, null, options, request);
      }
      /// <summary>
      /// Request for setting an alarm
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void SetAlarm(global::Org.Apache.REEF.Bridge.Proto.AlarmRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAlarm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request for setting an alarm
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void SetAlarm(global::Org.Apache.REEF.Bridge.Proto.AlarmRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAlarm, null, options, request);
      }
      /// <summary>
      /// Request for setting an alarm
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> SetAlarmAsync(global::Org.Apache.REEF.Bridge.Proto.AlarmRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAlarmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request for setting an alarm
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> SetAlarmAsync(global::Org.Apache.REEF.Bridge.Proto.AlarmRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAlarm, null, options, request);
      }
      /// <summary>
      /// Request operation on an allocated evaluator
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void AllocatedEvaluatorOp(global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllocatedEvaluatorOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request operation on an allocated evaluator
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void AllocatedEvaluatorOp(global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllocatedEvaluatorOp, null, options, request);
      }
      /// <summary>
      /// Request operation on an allocated evaluator
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> AllocatedEvaluatorOpAsync(global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllocatedEvaluatorOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request operation on an allocated evaluator
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> AllocatedEvaluatorOpAsync(global::Org.Apache.REEF.Bridge.Proto.AllocatedEvaluatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllocatedEvaluatorOp, null, options, request);
      }
      /// <summary>
      /// Request operation on an active context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void ActiveContextOp(global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActiveContextOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request operation on an active context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void ActiveContextOp(global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActiveContextOp, null, options, request);
      }
      /// <summary>
      /// Request operation on an active context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> ActiveContextOpAsync(global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActiveContextOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request operation on an active context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> ActiveContextOpAsync(global::Org.Apache.REEF.Bridge.Proto.ActiveContextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActiveContextOp, null, options, request);
      }
      /// <summary>
      /// Request operation on a running task
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void RunningTaskOp(global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunningTaskOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request operation on a running task
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Apache.REEF.Bridge.Proto.Void RunningTaskOp(global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RunningTaskOp, null, options, request);
      }
      /// <summary>
      /// Request operation on a running task
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> RunningTaskOpAsync(global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunningTaskOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request operation on a running task
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Apache.REEF.Bridge.Proto.Void> RunningTaskOpAsync(global::Org.Apache.REEF.Bridge.Proto.RunningTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RunningTaskOp, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DriverServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DriverServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DriverServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterDriverClient, serviceImpl.RegisterDriverClient)
          .AddMethod(__Method_RequestResources, serviceImpl.RequestResources)
          .AddMethod(__Method_Shutdown, serviceImpl.Shutdown)
          .AddMethod(__Method_SetAlarm, serviceImpl.SetAlarm)
          .AddMethod(__Method_AllocatedEvaluatorOp, serviceImpl.AllocatedEvaluatorOp)
          .AddMethod(__Method_ActiveContextOp, serviceImpl.ActiveContextOp)
          .AddMethod(__Method_RunningTaskOp, serviceImpl.RunningTaskOp).Build();
    }

  }
}
#endregion
