// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DriverClientProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Apache.REEF.Bridge.Proto {

  /// <summary>Holder for reflection information generated from DriverClientProtocol.proto</summary>
  public static partial class DriverClientProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for DriverClientProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DriverClientProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpEcml2ZXJDbGllbnRQcm90b2NvbC5wcm90bxIMZHJpdmVyYnJpZGdlGhpE",
            "cml2ZXJDb21tb25Qcm90b2NvbC5wcm90byKDAQoRRHJpdmVyUmVzdGFydElu",
            "Zm8SHQoVcmVzdWJtaXNzaW9uX2F0dGVtcHRzGAEgASgNEi8KCnN0YXJ0X3Rp",
            "bWUYAiABKAsyGy5kcml2ZXJicmlkZ2UuU3RhcnRUaW1lSW5mbxIeChZleHBl",
            "Y3RlZF9ldmFsdWF0b3JfaWRzGAMgAygJImcKGkRyaXZlclJlc3RhcnRDb21w",
            "bGV0ZWRJbmZvEjMKD2NvbXBsZXRpb25fdGltZRgBIAEoCzIaLmRyaXZlcmJy",
            "aWRnZS5TdG9wVGltZUluZm8SFAoMaXNfdGltZWRfb3V0GAIgASgIIi0KCklk",
            "bGVTdGF0dXMSDwoHaXNfaWRsZRgBIAEoCBIOCgZyZWFzb24YAiABKAkiIwoN",
            "U3RhcnRUaW1lSW5mbxISCgpzdGFydF90aW1lGAEgASgDIiEKDFN0b3BUaW1l",
            "SW5mbxIRCglzdG9wX3RpbWUYASABKAMiNwoQQWxhcm1UcmlnZ2VySW5mbxIQ",
            "CghhbGFybV9pZBgBIAEoCRIRCgl0aW1lc3RhbXAYAiABKAMiTgoXRXZhbHVh",
            "dG9yRGVzY3JpcHRvckluZm8SDgoGbWVtb3J5GAEgASgFEg0KBWNvcmVzGAIg",
            "ASgFEhQKDHJ1bnRpbWVfbmFtZRgDIAEoCSLtAQoNRXZhbHVhdG9ySW5mbxIU",
            "CgxldmFsdWF0b3JfaWQYASABKAkSOAoHZmFpbHVyZRgCIAEoCzInLmRyaXZl",
            "cmJyaWRnZS5FdmFsdWF0b3JJbmZvLkZhaWx1cmVJbmZvEj4KD2Rlc2NyaXB0",
            "b3JfaW5mbxgDIAEoCzIlLmRyaXZlcmJyaWRnZS5FdmFsdWF0b3JEZXNjcmlw",
            "dG9ySW5mbxpMCgtGYWlsdXJlSW5mbxIPCgdtZXNzYWdlGAEgASgJEhYKDmZh",
            "aWxlZENvbnRleHRzGAIgAygJEhQKDGZhaWxlZFRhc2tJZBgDIAEoCSLEAQoL",
            "Q29udGV4dEluZm8SEgoKY29udGV4dF9pZBgBIAEoCRIUCgxldmFsdWF0b3Jf",
            "aWQYAiABKAkSEQoJcGFyZW50X2lkGAMgASgJEkgKGWV2YWx1YXRvcl9kZXNj",
            "cmlwdG9yX2luZm8YBCABKAsyJS5kcml2ZXJicmlkZ2UuRXZhbHVhdG9yRGVz",
            "Y3JpcHRvckluZm8SLgoJZXhjZXB0aW9uGAUgASgLMhsuZHJpdmVyYnJpZGdl",
            "LkV4Y2VwdGlvbkluZm8ibQoSQ29udGV4dE1lc3NhZ2VJbmZvEhIKCmNvbnRl",
            "eHRfaWQYASABKAkSDwoHcGF5bG9hZBgCIAEoDBIXCg9zZXF1ZW5jZV9udW1i",
            "ZXIYAyABKAMSGQoRbWVzc2FnZV9zb3VyY2VfaWQYBCABKAkihwEKCFRhc2tJ",
            "bmZvEg8KB3Rhc2tfaWQYASABKAkSDgoGcmVzdWx0GAIgASgMEioKB2NvbnRl",
            "eHQYBSABKAsyGS5kcml2ZXJicmlkZ2UuQ29udGV4dEluZm8SLgoJZXhjZXB0",
            "aW9uGAogASgLMhsuZHJpdmVyYnJpZGdlLkV4Y2VwdGlvbkluZm8iewoPVGFz",
            "a01lc3NhZ2VJbmZvEg8KB3Rhc2tfaWQYASABKAkSDwoHcGF5bG9hZBgCIAEo",
            "DBIXCg9zZXF1ZW5jZV9udW1iZXIYAyABKAMSEgoKY29udGV4dF9pZBgEIAEo",
            "CRIZChFtZXNzYWdlX3NvdXJjZV9pZBgFIAEoCSIkChFDbGllbnRNZXNzYWdl",
            "SW5mbxIPCgdwYXlsb2FkGAEgASgMMq8OCgxEcml2ZXJDbGllbnQSRgoUSWRs",
            "ZW5lc3NDaGVja0hhbmRsZXISEi5kcml2ZXJicmlkZ2UuVm9pZBoYLmRyaXZl",
            "cmJyaWRnZS5JZGxlU3RhdHVzIgASQQoMU3RhcnRIYW5kbGVyEhsuZHJpdmVy",
            "YnJpZGdlLlN0YXJ0VGltZUluZm8aEi5kcml2ZXJicmlkZ2UuVm9pZCIAEj8K",
            "C1N0b3BIYW5kbGVyEhouZHJpdmVyYnJpZGdlLlN0b3BUaW1lSW5mbxoSLmRy",
            "aXZlcmJyaWRnZS5Wb2lkIgASRAoMQWxhcm1UcmlnZ2VyEh4uZHJpdmVyYnJp",
            "ZGdlLkFsYXJtVHJpZ2dlckluZm8aEi5kcml2ZXJicmlkZ2UuVm9pZCIAEk4K",
            "GUFsbG9jYXRlZEV2YWx1YXRvckhhbmRsZXISGy5kcml2ZXJicmlkZ2UuRXZh",
            "bHVhdG9ySW5mbxoSLmRyaXZlcmJyaWRnZS5Wb2lkIgASTgoZQ29tcGxldGVk",
            "RXZhbHVhdG9ySGFuZGxlchIbLmRyaXZlcmJyaWRnZS5FdmFsdWF0b3JJbmZv",
            "GhIuZHJpdmVyYnJpZGdlLlZvaWQiABJLChZGYWlsZWRFdmFsdWF0b3JIYW5k",
            "bGVyEhsuZHJpdmVyYnJpZGdlLkV2YWx1YXRvckluZm8aEi5kcml2ZXJicmlk",
            "Z2UuVm9pZCIAEkcKFEFjdGl2ZUNvbnRleHRIYW5kbGVyEhkuZHJpdmVyYnJp",
            "ZGdlLkNvbnRleHRJbmZvGhIuZHJpdmVyYnJpZGdlLlZvaWQiABJHChRDbG9z",
            "ZWRDb250ZXh0SGFuZGxlchIZLmRyaXZlcmJyaWRnZS5Db250ZXh0SW5mbxoS",
            "LmRyaXZlcmJyaWRnZS5Wb2lkIgASRwoURmFpbGVkQ29udGV4dEhhbmRsZXIS",
            "GS5kcml2ZXJicmlkZ2UuQ29udGV4dEluZm8aEi5kcml2ZXJicmlkZ2UuVm9p",
            "ZCIAEk8KFUNvbnRleHRNZXNzYWdlSGFuZGxlchIgLmRyaXZlcmJyaWRnZS5D",
            "b250ZXh0TWVzc2FnZUluZm8aEi5kcml2ZXJicmlkZ2UuVm9pZCIAEkIKElJ1",
            "bm5pbmdUYXNrSGFuZGxlchIWLmRyaXZlcmJyaWRnZS5UYXNrSW5mbxoSLmRy",
            "aXZlcmJyaWRnZS5Wb2lkIgASQQoRRmFpbGVkVGFza0hhbmRsZXISFi5kcml2",
            "ZXJicmlkZ2UuVGFza0luZm8aEi5kcml2ZXJicmlkZ2UuVm9pZCIAEkQKFENv",
            "bXBsZXRlZFRhc2tIYW5kbGVyEhYuZHJpdmVyYnJpZGdlLlRhc2tJbmZvGhIu",
            "ZHJpdmVyYnJpZGdlLlZvaWQiABJEChRTdXNwZW5kZWRUYXNrSGFuZGxlchIW",
            "LmRyaXZlcmJyaWRnZS5UYXNrSW5mbxoSLmRyaXZlcmJyaWRnZS5Wb2lkIgAS",
            "SQoSVGFza01lc3NhZ2VIYW5kbGVyEh0uZHJpdmVyYnJpZGdlLlRhc2tNZXNz",
            "YWdlSW5mbxoSLmRyaXZlcmJyaWRnZS5Wb2lkIgASTQoUQ2xpZW50TWVzc2Fn",
            "ZUhhbmRsZXISHy5kcml2ZXJicmlkZ2UuQ2xpZW50TWVzc2FnZUluZm8aEi5k",
            "cml2ZXJicmlkZ2UuVm9pZCIAEj4KEkNsaWVudENsb3NlSGFuZGxlchISLmRy",
            "aXZlcmJyaWRnZS5Wb2lkGhIuZHJpdmVyYnJpZGdlLlZvaWQiABJWCh1DbGll",
            "bnRDbG9zZVdpdGhNZXNzYWdlSGFuZGxlchIfLmRyaXZlcmJyaWRnZS5DbGll",
            "bnRNZXNzYWdlSW5mbxoSLmRyaXZlcmJyaWRnZS5Wb2lkIgASTQoURHJpdmVy",
            "UmVzdGFydEhhbmRsZXISHy5kcml2ZXJicmlkZ2UuRHJpdmVyUmVzdGFydElu",
            "Zm8aEi5kcml2ZXJicmlkZ2UuVm9pZCIAElQKIURyaXZlclJlc3RhcnRBY3Rp",
            "dmVDb250ZXh0SGFuZGxlchIZLmRyaXZlcmJyaWRnZS5Db250ZXh0SW5mbxoS",
            "LmRyaXZlcmJyaWRnZS5Wb2lkIgASTwofRHJpdmVyUmVzdGFydFJ1bm5pbmdU",
            "YXNrSGFuZGxlchIWLmRyaXZlcmJyaWRnZS5UYXNrSW5mbxoSLmRyaXZlcmJy",
            "aWRnZS5Wb2lkIgASXwodRHJpdmVyUmVzdGFydENvbXBsZXRlZEhhbmRsZXIS",
            "KC5kcml2ZXJicmlkZ2UuRHJpdmVyUmVzdGFydENvbXBsZXRlZEluZm8aEi5k",
            "cml2ZXJicmlkZ2UuVm9pZCIAElgKI0RyaXZlclJlc3RhcnRGYWlsZWRFdmFs",
            "dWF0b3JIYW5kbGVyEhsuZHJpdmVyYnJpZGdlLkV2YWx1YXRvckluZm8aEi5k",
            "cml2ZXJicmlkZ2UuVm9pZCIAQlUKHG9yZy5hcGFjaGUucmVlZi5icmlkZ2Uu",
            "cHJvdG9CFERyaXZlckNsaWVudFByb3RvY29sUAGqAhxPcmcuQXBhY2hlLlJF",
            "RUYuQnJpZGdlLlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Org.Apache.REEF.Bridge.Proto.DriverCommonProtocolReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.DriverRestartInfo), global::Org.Apache.REEF.Bridge.Proto.DriverRestartInfo.Parser, new[]{ "ResubmissionAttempts", "StartTime", "ExpectedEvaluatorIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.DriverRestartCompletedInfo), global::Org.Apache.REEF.Bridge.Proto.DriverRestartCompletedInfo.Parser, new[]{ "CompletionTime", "IsTimedOut" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.IdleStatus), global::Org.Apache.REEF.Bridge.Proto.IdleStatus.Parser, new[]{ "IsIdle", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.StartTimeInfo), global::Org.Apache.REEF.Bridge.Proto.StartTimeInfo.Parser, new[]{ "StartTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.StopTimeInfo), global::Org.Apache.REEF.Bridge.Proto.StopTimeInfo.Parser, new[]{ "StopTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.AlarmTriggerInfo), global::Org.Apache.REEF.Bridge.Proto.AlarmTriggerInfo.Parser, new[]{ "AlarmId", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo), global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo.Parser, new[]{ "Memory", "Cores", "RuntimeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.EvaluatorInfo), global::Org.Apache.REEF.Bridge.Proto.EvaluatorInfo.Parser, new[]{ "EvaluatorId", "Failure", "DescriptorInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.EvaluatorInfo.Types.FailureInfo), global::Org.Apache.REEF.Bridge.Proto.EvaluatorInfo.Types.FailureInfo.Parser, new[]{ "Message", "FailedContexts", "FailedTaskId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.ContextInfo), global::Org.Apache.REEF.Bridge.Proto.ContextInfo.Parser, new[]{ "ContextId", "EvaluatorId", "ParentId", "EvaluatorDescriptorInfo", "Exception" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.ContextMessageInfo), global::Org.Apache.REEF.Bridge.Proto.ContextMessageInfo.Parser, new[]{ "ContextId", "Payload", "SequenceNumber", "MessageSourceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.TaskInfo), global::Org.Apache.REEF.Bridge.Proto.TaskInfo.Parser, new[]{ "TaskId", "Result", "Context", "Exception" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.TaskMessageInfo), global::Org.Apache.REEF.Bridge.Proto.TaskMessageInfo.Parser, new[]{ "TaskId", "Payload", "SequenceNumber", "ContextId", "MessageSourceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.ClientMessageInfo), global::Org.Apache.REEF.Bridge.Proto.ClientMessageInfo.Parser, new[]{ "Payload" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Driver restart information
  /// </summary>
  public sealed partial class DriverRestartInfo : pb::IMessage<DriverRestartInfo> {
    private static readonly pb::MessageParser<DriverRestartInfo> _parser = new pb::MessageParser<DriverRestartInfo>(() => new DriverRestartInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriverRestartInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverRestartInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverRestartInfo(DriverRestartInfo other) : this() {
      resubmissionAttempts_ = other.resubmissionAttempts_;
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
      expectedEvaluatorIds_ = other.expectedEvaluatorIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverRestartInfo Clone() {
      return new DriverRestartInfo(this);
    }

    /// <summary>Field number for the "resubmission_attempts" field.</summary>
    public const int ResubmissionAttemptsFieldNumber = 1;
    private uint resubmissionAttempts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResubmissionAttempts {
      get { return resubmissionAttempts_; }
      set {
        resubmissionAttempts_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private global::Org.Apache.REEF.Bridge.Proto.StartTimeInfo startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.StartTimeInfo StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "expected_evaluator_ids" field.</summary>
    public const int ExpectedEvaluatorIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_expectedEvaluatorIds_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> expectedEvaluatorIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExpectedEvaluatorIds {
      get { return expectedEvaluatorIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriverRestartInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriverRestartInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResubmissionAttempts != other.ResubmissionAttempts) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if(!expectedEvaluatorIds_.Equals(other.expectedEvaluatorIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResubmissionAttempts != 0) hash ^= ResubmissionAttempts.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      hash ^= expectedEvaluatorIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResubmissionAttempts != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResubmissionAttempts);
      }
      if (startTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartTime);
      }
      expectedEvaluatorIds_.WriteTo(output, _repeated_expectedEvaluatorIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResubmissionAttempts != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResubmissionAttempts);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      size += expectedEvaluatorIds_.CalculateSize(_repeated_expectedEvaluatorIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriverRestartInfo other) {
      if (other == null) {
        return;
      }
      if (other.ResubmissionAttempts != 0) {
        ResubmissionAttempts = other.ResubmissionAttempts;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Org.Apache.REEF.Bridge.Proto.StartTimeInfo();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      expectedEvaluatorIds_.Add(other.expectedEvaluatorIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResubmissionAttempts = input.ReadUInt32();
            break;
          }
          case 18: {
            if (startTime_ == null) {
              startTime_ = new global::Org.Apache.REEF.Bridge.Proto.StartTimeInfo();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 26: {
            expectedEvaluatorIds_.AddEntriesFrom(input, _repeated_expectedEvaluatorIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Driver restart completed information
  /// </summary>
  public sealed partial class DriverRestartCompletedInfo : pb::IMessage<DriverRestartCompletedInfo> {
    private static readonly pb::MessageParser<DriverRestartCompletedInfo> _parser = new pb::MessageParser<DriverRestartCompletedInfo>(() => new DriverRestartCompletedInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriverRestartCompletedInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverRestartCompletedInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverRestartCompletedInfo(DriverRestartCompletedInfo other) : this() {
      CompletionTime = other.completionTime_ != null ? other.CompletionTime.Clone() : null;
      isTimedOut_ = other.isTimedOut_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverRestartCompletedInfo Clone() {
      return new DriverRestartCompletedInfo(this);
    }

    /// <summary>Field number for the "completion_time" field.</summary>
    public const int CompletionTimeFieldNumber = 1;
    private global::Org.Apache.REEF.Bridge.Proto.StopTimeInfo completionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.StopTimeInfo CompletionTime {
      get { return completionTime_; }
      set {
        completionTime_ = value;
      }
    }

    /// <summary>Field number for the "is_timed_out" field.</summary>
    public const int IsTimedOutFieldNumber = 2;
    private bool isTimedOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimedOut {
      get { return isTimedOut_; }
      set {
        isTimedOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriverRestartCompletedInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriverRestartCompletedInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CompletionTime, other.CompletionTime)) return false;
      if (IsTimedOut != other.IsTimedOut) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (completionTime_ != null) hash ^= CompletionTime.GetHashCode();
      if (IsTimedOut != false) hash ^= IsTimedOut.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (completionTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CompletionTime);
      }
      if (IsTimedOut != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTimedOut);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (completionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompletionTime);
      }
      if (IsTimedOut != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriverRestartCompletedInfo other) {
      if (other == null) {
        return;
      }
      if (other.completionTime_ != null) {
        if (completionTime_ == null) {
          completionTime_ = new global::Org.Apache.REEF.Bridge.Proto.StopTimeInfo();
        }
        CompletionTime.MergeFrom(other.CompletionTime);
      }
      if (other.IsTimedOut != false) {
        IsTimedOut = other.IsTimedOut;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (completionTime_ == null) {
              completionTime_ = new global::Org.Apache.REEF.Bridge.Proto.StopTimeInfo();
            }
            input.ReadMessage(completionTime_);
            break;
          }
          case 16: {
            IsTimedOut = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// IdleStatus response to idleness inquiry
  /// </summary>
  public sealed partial class IdleStatus : pb::IMessage<IdleStatus> {
    private static readonly pb::MessageParser<IdleStatus> _parser = new pb::MessageParser<IdleStatus>(() => new IdleStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdleStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleStatus(IdleStatus other) : this() {
      isIdle_ = other.isIdle_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleStatus Clone() {
      return new IdleStatus(this);
    }

    /// <summary>Field number for the "is_idle" field.</summary>
    public const int IsIdleFieldNumber = 1;
    private bool isIdle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdle {
      get { return isIdle_; }
      set {
        isIdle_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdleStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdleStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsIdle != other.IsIdle) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsIdle != false) hash ^= IsIdle.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsIdle != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsIdle);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsIdle != false) {
        size += 1 + 1;
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdleStatus other) {
      if (other == null) {
        return;
      }
      if (other.IsIdle != false) {
        IsIdle = other.IsIdle;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsIdle = input.ReadBool();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing resource request.
  /// </summary>
  public sealed partial class StartTimeInfo : pb::IMessage<StartTimeInfo> {
    private static readonly pb::MessageParser<StartTimeInfo> _parser = new pb::MessageParser<StartTimeInfo>(() => new StartTimeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartTimeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartTimeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartTimeInfo(StartTimeInfo other) : this() {
      startTime_ = other.startTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartTimeInfo Clone() {
      return new StartTimeInfo(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartTimeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartTimeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTime != other.StartTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartTimeInfo other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopTimeInfo : pb::IMessage<StopTimeInfo> {
    private static readonly pb::MessageParser<StopTimeInfo> _parser = new pb::MessageParser<StopTimeInfo>(() => new StopTimeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopTimeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopTimeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopTimeInfo(StopTimeInfo other) : this() {
      stopTime_ = other.stopTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopTimeInfo Clone() {
      return new StopTimeInfo(this);
    }

    /// <summary>Field number for the "stop_time" field.</summary>
    public const int StopTimeFieldNumber = 1;
    private long stopTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StopTime {
      get { return stopTime_; }
      set {
        stopTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopTimeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopTimeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StopTime != other.StopTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StopTime != 0L) hash ^= StopTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StopTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StopTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StopTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StopTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopTimeInfo other) {
      if (other == null) {
        return;
      }
      if (other.StopTime != 0L) {
        StopTime = other.StopTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StopTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Information associated with an alarm that was set.
  /// </summary>
  public sealed partial class AlarmTriggerInfo : pb::IMessage<AlarmTriggerInfo> {
    private static readonly pb::MessageParser<AlarmTriggerInfo> _parser = new pb::MessageParser<AlarmTriggerInfo>(() => new AlarmTriggerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlarmTriggerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmTriggerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmTriggerInfo(AlarmTriggerInfo other) : this() {
      alarmId_ = other.alarmId_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmTriggerInfo Clone() {
      return new AlarmTriggerInfo(this);
    }

    /// <summary>Field number for the "alarm_id" field.</summary>
    public const int AlarmIdFieldNumber = 1;
    private string alarmId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlarmId {
      get { return alarmId_; }
      set {
        alarmId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlarmTriggerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlarmTriggerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlarmId != other.AlarmId) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlarmId.Length != 0) hash ^= AlarmId.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AlarmId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AlarmId);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlarmId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlarmId);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlarmTriggerInfo other) {
      if (other == null) {
        return;
      }
      if (other.AlarmId.Length != 0) {
        AlarmId = other.AlarmId;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AlarmId = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EvaluatorDescriptorInfo : pb::IMessage<EvaluatorDescriptorInfo> {
    private static readonly pb::MessageParser<EvaluatorDescriptorInfo> _parser = new pb::MessageParser<EvaluatorDescriptorInfo>(() => new EvaluatorDescriptorInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvaluatorDescriptorInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluatorDescriptorInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluatorDescriptorInfo(EvaluatorDescriptorInfo other) : this() {
      memory_ = other.memory_;
      cores_ = other.cores_;
      runtimeName_ = other.runtimeName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluatorDescriptorInfo Clone() {
      return new EvaluatorDescriptorInfo(this);
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 1;
    private int memory_;
    /// <summary>
    /// the amount of memory allocated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    /// <summary>Field number for the "cores" field.</summary>
    public const int CoresFieldNumber = 2;
    private int cores_;
    /// <summary>
    /// the number of virtual cores allocated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cores {
      get { return cores_; }
      set {
        cores_ = value;
      }
    }

    /// <summary>Field number for the "runtime_name" field.</summary>
    public const int RuntimeNameFieldNumber = 3;
    private string runtimeName_ = "";
    /// <summary>
    /// name of the runtime
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeName {
      get { return runtimeName_; }
      set {
        runtimeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvaluatorDescriptorInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvaluatorDescriptorInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Memory != other.Memory) return false;
      if (Cores != other.Cores) return false;
      if (RuntimeName != other.RuntimeName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Memory != 0) hash ^= Memory.GetHashCode();
      if (Cores != 0) hash ^= Cores.GetHashCode();
      if (RuntimeName.Length != 0) hash ^= RuntimeName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Memory != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Memory);
      }
      if (Cores != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cores);
      }
      if (RuntimeName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RuntimeName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Memory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Memory);
      }
      if (Cores != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cores);
      }
      if (RuntimeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvaluatorDescriptorInfo other) {
      if (other == null) {
        return;
      }
      if (other.Memory != 0) {
        Memory = other.Memory;
      }
      if (other.Cores != 0) {
        Cores = other.Cores;
      }
      if (other.RuntimeName.Length != 0) {
        RuntimeName = other.RuntimeName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Memory = input.ReadInt32();
            break;
          }
          case 16: {
            Cores = input.ReadInt32();
            break;
          }
          case 26: {
            RuntimeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EvaluatorInfo : pb::IMessage<EvaluatorInfo> {
    private static readonly pb::MessageParser<EvaluatorInfo> _parser = new pb::MessageParser<EvaluatorInfo>(() => new EvaluatorInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvaluatorInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluatorInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluatorInfo(EvaluatorInfo other) : this() {
      evaluatorId_ = other.evaluatorId_;
      Failure = other.failure_ != null ? other.Failure.Clone() : null;
      DescriptorInfo = other.descriptorInfo_ != null ? other.DescriptorInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluatorInfo Clone() {
      return new EvaluatorInfo(this);
    }

    /// <summary>Field number for the "evaluator_id" field.</summary>
    public const int EvaluatorIdFieldNumber = 1;
    private string evaluatorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EvaluatorId {
      get { return evaluatorId_; }
      set {
        evaluatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "failure" field.</summary>
    public const int FailureFieldNumber = 2;
    private global::Org.Apache.REEF.Bridge.Proto.EvaluatorInfo.Types.FailureInfo failure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.EvaluatorInfo.Types.FailureInfo Failure {
      get { return failure_; }
      set {
        failure_ = value;
      }
    }

    /// <summary>Field number for the "descriptor_info" field.</summary>
    public const int DescriptorInfoFieldNumber = 3;
    private global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo descriptorInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo DescriptorInfo {
      get { return descriptorInfo_; }
      set {
        descriptorInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvaluatorInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvaluatorInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EvaluatorId != other.EvaluatorId) return false;
      if (!object.Equals(Failure, other.Failure)) return false;
      if (!object.Equals(DescriptorInfo, other.DescriptorInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EvaluatorId.Length != 0) hash ^= EvaluatorId.GetHashCode();
      if (failure_ != null) hash ^= Failure.GetHashCode();
      if (descriptorInfo_ != null) hash ^= DescriptorInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EvaluatorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EvaluatorId);
      }
      if (failure_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Failure);
      }
      if (descriptorInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DescriptorInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EvaluatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EvaluatorId);
      }
      if (failure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Failure);
      }
      if (descriptorInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DescriptorInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvaluatorInfo other) {
      if (other == null) {
        return;
      }
      if (other.EvaluatorId.Length != 0) {
        EvaluatorId = other.EvaluatorId;
      }
      if (other.failure_ != null) {
        if (failure_ == null) {
          failure_ = new global::Org.Apache.REEF.Bridge.Proto.EvaluatorInfo.Types.FailureInfo();
        }
        Failure.MergeFrom(other.Failure);
      }
      if (other.descriptorInfo_ != null) {
        if (descriptorInfo_ == null) {
          descriptorInfo_ = new global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo();
        }
        DescriptorInfo.MergeFrom(other.DescriptorInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EvaluatorId = input.ReadString();
            break;
          }
          case 18: {
            if (failure_ == null) {
              failure_ = new global::Org.Apache.REEF.Bridge.Proto.EvaluatorInfo.Types.FailureInfo();
            }
            input.ReadMessage(failure_);
            break;
          }
          case 26: {
            if (descriptorInfo_ == null) {
              descriptorInfo_ = new global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo();
            }
            input.ReadMessage(descriptorInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EvaluatorInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FailureInfo : pb::IMessage<FailureInfo> {
        private static readonly pb::MessageParser<FailureInfo> _parser = new pb::MessageParser<FailureInfo>(() => new FailureInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FailureInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Apache.REEF.Bridge.Proto.EvaluatorInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureInfo(FailureInfo other) : this() {
          message_ = other.message_;
          failedContexts_ = other.failedContexts_.Clone();
          failedTaskId_ = other.failedTaskId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureInfo Clone() {
          return new FailureInfo(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 1;
        private string message_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message {
          get { return message_; }
          set {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "failedContexts" field.</summary>
        public const int FailedContextsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_failedContexts_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> failedContexts_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> FailedContexts {
          get { return failedContexts_; }
        }

        /// <summary>Field number for the "failedTaskId" field.</summary>
        public const int FailedTaskIdFieldNumber = 3;
        private string failedTaskId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FailedTaskId {
          get { return failedTaskId_; }
          set {
            failedTaskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FailureInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FailureInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Message != other.Message) return false;
          if(!failedContexts_.Equals(other.failedContexts_)) return false;
          if (FailedTaskId != other.FailedTaskId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          hash ^= failedContexts_.GetHashCode();
          if (FailedTaskId.Length != 0) hash ^= FailedTaskId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Message.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Message);
          }
          failedContexts_.WriteTo(output, _repeated_failedContexts_codec);
          if (FailedTaskId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(FailedTaskId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          size += failedContexts_.CalculateSize(_repeated_failedContexts_codec);
          if (FailedTaskId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FailedTaskId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FailureInfo other) {
          if (other == null) {
            return;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          failedContexts_.Add(other.failedContexts_);
          if (other.FailedTaskId.Length != 0) {
            FailedTaskId = other.FailedTaskId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Message = input.ReadString();
                break;
              }
              case 18: {
                failedContexts_.AddEntriesFrom(input, _repeated_failedContexts_codec);
                break;
              }
              case 26: {
                FailedTaskId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ContextInfo : pb::IMessage<ContextInfo> {
    private static readonly pb::MessageParser<ContextInfo> _parser = new pb::MessageParser<ContextInfo>(() => new ContextInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContextInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextInfo(ContextInfo other) : this() {
      contextId_ = other.contextId_;
      evaluatorId_ = other.evaluatorId_;
      parentId_ = other.parentId_;
      EvaluatorDescriptorInfo = other.evaluatorDescriptorInfo_ != null ? other.EvaluatorDescriptorInfo.Clone() : null;
      Exception = other.exception_ != null ? other.Exception.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextInfo Clone() {
      return new ContextInfo(this);
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 1;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "evaluator_id" field.</summary>
    public const int EvaluatorIdFieldNumber = 2;
    private string evaluatorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EvaluatorId {
      get { return evaluatorId_; }
      set {
        evaluatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 3;
    private string parentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "evaluator_descriptor_info" field.</summary>
    public const int EvaluatorDescriptorInfoFieldNumber = 4;
    private global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo evaluatorDescriptorInfo_;
    /// <summary>
    /// Carry this with us for driver restart
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo EvaluatorDescriptorInfo {
      get { return evaluatorDescriptorInfo_; }
      set {
        evaluatorDescriptorInfo_ = value;
      }
    }

    /// <summary>Field number for the "exception" field.</summary>
    public const int ExceptionFieldNumber = 5;
    private global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo exception_;
    /// <summary>
    /// Optional exception information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo Exception {
      get { return exception_; }
      set {
        exception_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContextInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContextInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextId != other.ContextId) return false;
      if (EvaluatorId != other.EvaluatorId) return false;
      if (ParentId != other.ParentId) return false;
      if (!object.Equals(EvaluatorDescriptorInfo, other.EvaluatorDescriptorInfo)) return false;
      if (!object.Equals(Exception, other.Exception)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (EvaluatorId.Length != 0) hash ^= EvaluatorId.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (evaluatorDescriptorInfo_ != null) hash ^= EvaluatorDescriptorInfo.GetHashCode();
      if (exception_ != null) hash ^= Exception.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContextId);
      }
      if (EvaluatorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EvaluatorId);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentId);
      }
      if (evaluatorDescriptorInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EvaluatorDescriptorInfo);
      }
      if (exception_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Exception);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (EvaluatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EvaluatorId);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (evaluatorDescriptorInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EvaluatorDescriptorInfo);
      }
      if (exception_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exception);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContextInfo other) {
      if (other == null) {
        return;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.EvaluatorId.Length != 0) {
        EvaluatorId = other.EvaluatorId;
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      if (other.evaluatorDescriptorInfo_ != null) {
        if (evaluatorDescriptorInfo_ == null) {
          evaluatorDescriptorInfo_ = new global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo();
        }
        EvaluatorDescriptorInfo.MergeFrom(other.EvaluatorDescriptorInfo);
      }
      if (other.exception_ != null) {
        if (exception_ == null) {
          exception_ = new global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo();
        }
        Exception.MergeFrom(other.Exception);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ContextId = input.ReadString();
            break;
          }
          case 18: {
            EvaluatorId = input.ReadString();
            break;
          }
          case 26: {
            ParentId = input.ReadString();
            break;
          }
          case 34: {
            if (evaluatorDescriptorInfo_ == null) {
              evaluatorDescriptorInfo_ = new global::Org.Apache.REEF.Bridge.Proto.EvaluatorDescriptorInfo();
            }
            input.ReadMessage(evaluatorDescriptorInfo_);
            break;
          }
          case 42: {
            if (exception_ == null) {
              exception_ = new global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo();
            }
            input.ReadMessage(exception_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContextMessageInfo : pb::IMessage<ContextMessageInfo> {
    private static readonly pb::MessageParser<ContextMessageInfo> _parser = new pb::MessageParser<ContextMessageInfo>(() => new ContextMessageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContextMessageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextMessageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextMessageInfo(ContextMessageInfo other) : this() {
      contextId_ = other.contextId_;
      payload_ = other.payload_;
      sequenceNumber_ = other.sequenceNumber_;
      messageSourceId_ = other.messageSourceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextMessageInfo Clone() {
      return new ContextMessageInfo(this);
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 1;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 3;
    private long sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "message_source_id" field.</summary>
    public const int MessageSourceIdFieldNumber = 4;
    private string messageSourceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageSourceId {
      get { return messageSourceId_; }
      set {
        messageSourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContextMessageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContextMessageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextId != other.ContextId) return false;
      if (Payload != other.Payload) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if (MessageSourceId != other.MessageSourceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (SequenceNumber != 0L) hash ^= SequenceNumber.GetHashCode();
      if (MessageSourceId.Length != 0) hash ^= MessageSourceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContextId);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (SequenceNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SequenceNumber);
      }
      if (MessageSourceId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MessageSourceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (SequenceNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceNumber);
      }
      if (MessageSourceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageSourceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContextMessageInfo other) {
      if (other == null) {
        return;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.SequenceNumber != 0L) {
        SequenceNumber = other.SequenceNumber;
      }
      if (other.MessageSourceId.Length != 0) {
        MessageSourceId = other.MessageSourceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ContextId = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 24: {
            SequenceNumber = input.ReadInt64();
            break;
          }
          case 34: {
            MessageSourceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskInfo : pb::IMessage<TaskInfo> {
    private static readonly pb::MessageParser<TaskInfo> _parser = new pb::MessageParser<TaskInfo>(() => new TaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo(TaskInfo other) : this() {
      taskId_ = other.taskId_;
      result_ = other.result_;
      Context = other.context_ != null ? other.Context.Clone() : null;
      Exception = other.exception_ != null ? other.Exception.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo Clone() {
      return new TaskInfo(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    /// Task identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private pb::ByteString result_ = pb::ByteString.Empty;
    /// <summary>
    /// Task result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 5;
    private global::Org.Apache.REEF.Bridge.Proto.ContextInfo context_;
    /// <summary>
    /// Carry entire context info since client may not have received it
    /// when submitting task against allocated evalautor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.ContextInfo Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "exception" field.</summary>
    public const int ExceptionFieldNumber = 10;
    private global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo exception_;
    /// <summary>
    /// Possible exception encountered in task execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo Exception {
      get { return exception_; }
      set {
        exception_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Result != other.Result) return false;
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Exception, other.Exception)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      if (exception_ != null) hash ^= Exception.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Result);
      }
      if (context_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Context);
      }
      if (exception_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Exception);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Result);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (exception_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exception);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Org.Apache.REEF.Bridge.Proto.ContextInfo();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.exception_ != null) {
        if (exception_ == null) {
          exception_ = new global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo();
        }
        Exception.MergeFrom(other.Exception);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            Result = input.ReadBytes();
            break;
          }
          case 42: {
            if (context_ == null) {
              context_ = new global::Org.Apache.REEF.Bridge.Proto.ContextInfo();
            }
            input.ReadMessage(context_);
            break;
          }
          case 82: {
            if (exception_ == null) {
              exception_ = new global::Org.Apache.REEF.Bridge.Proto.ExceptionInfo();
            }
            input.ReadMessage(exception_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskMessageInfo : pb::IMessage<TaskMessageInfo> {
    private static readonly pb::MessageParser<TaskMessageInfo> _parser = new pb::MessageParser<TaskMessageInfo>(() => new TaskMessageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskMessageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskMessageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskMessageInfo(TaskMessageInfo other) : this() {
      taskId_ = other.taskId_;
      payload_ = other.payload_;
      sequenceNumber_ = other.sequenceNumber_;
      contextId_ = other.contextId_;
      messageSourceId_ = other.messageSourceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskMessageInfo Clone() {
      return new TaskMessageInfo(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 3;
    private long sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 4;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_source_id" field.</summary>
    public const int MessageSourceIdFieldNumber = 5;
    private string messageSourceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageSourceId {
      get { return messageSourceId_; }
      set {
        messageSourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskMessageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskMessageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Payload != other.Payload) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if (ContextId != other.ContextId) return false;
      if (MessageSourceId != other.MessageSourceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (SequenceNumber != 0L) hash ^= SequenceNumber.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (MessageSourceId.Length != 0) hash ^= MessageSourceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (SequenceNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SequenceNumber);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ContextId);
      }
      if (MessageSourceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MessageSourceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (SequenceNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceNumber);
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (MessageSourceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageSourceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskMessageInfo other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.SequenceNumber != 0L) {
        SequenceNumber = other.SequenceNumber;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.MessageSourceId.Length != 0) {
        MessageSourceId = other.MessageSourceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 24: {
            SequenceNumber = input.ReadInt64();
            break;
          }
          case 34: {
            ContextId = input.ReadString();
            break;
          }
          case 42: {
            MessageSourceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientMessageInfo : pb::IMessage<ClientMessageInfo> {
    private static readonly pb::MessageParser<ClientMessageInfo> _parser = new pb::MessageParser<ClientMessageInfo>(() => new ClientMessageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientMessageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.DriverClientProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessageInfo(ClientMessageInfo other) : this() {
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessageInfo Clone() {
      return new ClientMessageInfo(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientMessageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientMessageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientMessageInfo other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
