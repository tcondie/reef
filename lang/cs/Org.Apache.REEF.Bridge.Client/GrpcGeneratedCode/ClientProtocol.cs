// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Apache.REEF.Bridge.Proto {

  /// <summary>Holder for reflection information generated from ClientProtocol.proto</summary>
  public static partial class ClientProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for ClientProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRDbGllbnRQcm90b2NvbC5wcm90bxIMZHJpdmVyYnJpZGdlIoMBChZMb2Nh",
            "bFJ1bnRpbWVQYXJhbWV0ZXJzEiAKGG1heF9udW1iZXJfb2ZfZXZhbHVhdG9y",
            "cxgBIAEoDRIbChNydW50aW1lX3Jvb3RfZm9sZGVyGAIgASgJEhYKDmp2bV9o",
            "ZWFwX3NsYWNrGAMgASgCEhIKCnJhY2tfbmFtZXMYBCADKAkikgEKFVlhcm5S",
            "dW50aW1lUGFyYW1ldGVycxINCgVxdWV1ZRgBIAEoCRIQCghwcmlvcml0eRgC",
            "IAEoDRIXCg91bm1hbmdlZF9kcml2ZXIYAyABKAgSFgoOZmlsZXN5c3RlbV91",
            "cmwYBSABKAkSJwofam9iX3N1Ym1pc3Npb25fZGlyZWN0b3J5X3ByZWZpeBgG",
            "IAEoCSKLAgobQXp1cmVCYXRjaFJ1bnRpbWVQYXJhbWV0ZXJzEiAKGGF6dXJl",
            "X2JhdGNoX2FjY291bnRfbmFtZRgBIAEoCRIfChdhenVyZV9iYXRjaF9hY2Nv",
            "dW50X2tleRgCIAEoCRIfChdhenVyZV9iYXRjaF9hY2NvdW50X3VyaRgDIAEo",
            "CRIbChNhenVyZV9iYXRjaF9wb29sX2lkGAQgASgJEiIKGmF6dXJlX3N0b3Jh",
            "Z2VfYWNjb3VudF9uYW1lGAogASgJEiEKGWF6dXJlX3N0b3JhZ2VfYWNjb3Vu",
            "dF9rZXkYCyABKAkSJAocYXp1cmVfc3RvcmFnZV9jb250YWluZXJfbmFtZRgM",
            "IAEoCSIYChZNZXNvc1J1bnRpbWVQYXJhbWV0ZXJzIrkGChlEcml2ZXJDbGll",
            "bnRDb25maWd1cmF0aW9uEg0KBWpvYmlkGAEgASgJEhEKCWNwdV9jb3JlcxgC",
            "IAEoDRIRCgltZW1vcnlfbWIYAyABKA0SJwofZHJpdmVyX2pvYl9zdWJtaXNz",
            "aW9uX2RpcmVjdG9yeRgEIAEoCRI9Cg1sb2NhbF9ydW50aW1lGAUgASgLMiQu",
            "ZHJpdmVyYnJpZGdlLkxvY2FsUnVudGltZVBhcmFtZXRlcnNIABI7Cgx5YXJu",
            "X3J1bnRpbWUYBiABKAsyIy5kcml2ZXJicmlkZ2UuWWFyblJ1bnRpbWVQYXJh",
            "bWV0ZXJzSAASRAoPYXpiYXRjaF9ydW50aW1lGAcgASgLMikuZHJpdmVyYnJp",
            "ZGdlLkF6dXJlQmF0Y2hSdW50aW1lUGFyYW1ldGVyc0gAEj0KDW1lc29zX3J1",
            "bnRpbWUYCCABKAsyJC5kcml2ZXJicmlkZ2UuTWVzb3NSdW50aW1lUGFyYW1l",
            "dGVyc0gAEiQKHGRyaXZlcl9jbGllbnRfbGF1bmNoX2NvbW1hbmQYCiABKAkS",
            "HQoVZHJpdmVyX3Jlc3RhcnRfZW5hYmxlGAsgASgIEjEKKWRyaXZlcl9yZXN0",
            "YXJ0X2V2YWx1YXRvcl9yZWNvdmVyeV9zZWNvbmRzGAwgASgNEhwKFHRjcF9w",
            "b3J0X3JhbmdlX2JlZ2luGA8gASgNEhwKFHRjcF9wb3J0X3JhbmdlX2NvdW50",
            "GBAgASgNEiAKGHRjcF9wb3J0X3JhbmdlX3RyeV9jb3VudBgRIAEoDRIUCgxn",
            "bG9iYWxfZmlsZXMYFCADKAkSEwoLbG9jYWxfZmlsZXMYFSADKAkSGAoQZ2xv",
            "YmFsX2xpYnJhcmllcxgWIAMoCRIXCg9sb2NhbF9saWJyYXJpZXMYFyADKAkS",
            "GgoSZW5hYmxlX2h0dHBfZHJpdmVyGBkgASgIEkQKEG9wZXJhdGluZ19zeXN0",
            "ZW0YHiABKA4yKi5kcml2ZXJicmlkZ2UuRHJpdmVyQ2xpZW50Q29uZmlndXJh",
            "dGlvbi5PUyIcCgJPUxILCgdXSU5ET1dTEAASCQoFTElOVVgQAUIJCgdydW50",
            "aW1lQk0KHG9yZy5hcGFjaGUucmVlZi5icmlkZ2UucHJvdG9CDkNsaWVudFBy",
            "b3RvY29sqgIcT3JnLkFwYWNoZS5SRUVGLkJyaWRnZS5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.LocalRuntimeParameters), global::Org.Apache.REEF.Bridge.Proto.LocalRuntimeParameters.Parser, new[]{ "MaxNumberOfEvaluators", "RuntimeRootFolder", "JvmHeapSlack", "RackNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.YarnRuntimeParameters), global::Org.Apache.REEF.Bridge.Proto.YarnRuntimeParameters.Parser, new[]{ "Queue", "Priority", "UnmangedDriver", "FilesystemUrl", "JobSubmissionDirectoryPrefix" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.AzureBatchRuntimeParameters), global::Org.Apache.REEF.Bridge.Proto.AzureBatchRuntimeParameters.Parser, new[]{ "AzureBatchAccountName", "AzureBatchAccountKey", "AzureBatchAccountUri", "AzureBatchPoolId", "AzureStorageAccountName", "AzureStorageAccountKey", "AzureStorageContainerName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.MesosRuntimeParameters), global::Org.Apache.REEF.Bridge.Proto.MesosRuntimeParameters.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Apache.REEF.Bridge.Proto.DriverClientConfiguration), global::Org.Apache.REEF.Bridge.Proto.DriverClientConfiguration.Parser, new[]{ "Jobid", "CpuCores", "MemoryMb", "DriverJobSubmissionDirectory", "LocalRuntime", "YarnRuntime", "AzbatchRuntime", "MesosRuntime", "DriverClientLaunchCommand", "DriverRestartEnable", "DriverRestartEvaluatorRecoverySeconds", "TcpPortRangeBegin", "TcpPortRangeCount", "TcpPortRangeTryCount", "GlobalFiles", "LocalFiles", "GlobalLibraries", "LocalLibraries", "EnableHttpDriver", "OperatingSystem" }, new[]{ "Runtime" }, new[]{ typeof(global::Org.Apache.REEF.Bridge.Proto.DriverClientConfiguration.Types.OS) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LocalRuntimeParameters : pb::IMessage<LocalRuntimeParameters> {
    private static readonly pb::MessageParser<LocalRuntimeParameters> _parser = new pb::MessageParser<LocalRuntimeParameters>(() => new LocalRuntimeParameters());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalRuntimeParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.ClientProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalRuntimeParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalRuntimeParameters(LocalRuntimeParameters other) : this() {
      maxNumberOfEvaluators_ = other.maxNumberOfEvaluators_;
      runtimeRootFolder_ = other.runtimeRootFolder_;
      jvmHeapSlack_ = other.jvmHeapSlack_;
      rackNames_ = other.rackNames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalRuntimeParameters Clone() {
      return new LocalRuntimeParameters(this);
    }

    /// <summary>Field number for the "max_number_of_evaluators" field.</summary>
    public const int MaxNumberOfEvaluatorsFieldNumber = 1;
    private uint maxNumberOfEvaluators_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNumberOfEvaluators {
      get { return maxNumberOfEvaluators_; }
      set {
        maxNumberOfEvaluators_ = value;
      }
    }

    /// <summary>Field number for the "runtime_root_folder" field.</summary>
    public const int RuntimeRootFolderFieldNumber = 2;
    private string runtimeRootFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeRootFolder {
      get { return runtimeRootFolder_; }
      set {
        runtimeRootFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jvm_heap_slack" field.</summary>
    public const int JvmHeapSlackFieldNumber = 3;
    private float jvmHeapSlack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JvmHeapSlack {
      get { return jvmHeapSlack_; }
      set {
        jvmHeapSlack_ = value;
      }
    }

    /// <summary>Field number for the "rack_names" field.</summary>
    public const int RackNamesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_rackNames_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> rackNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RackNames {
      get { return rackNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalRuntimeParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalRuntimeParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxNumberOfEvaluators != other.MaxNumberOfEvaluators) return false;
      if (RuntimeRootFolder != other.RuntimeRootFolder) return false;
      if (JvmHeapSlack != other.JvmHeapSlack) return false;
      if(!rackNames_.Equals(other.rackNames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxNumberOfEvaluators != 0) hash ^= MaxNumberOfEvaluators.GetHashCode();
      if (RuntimeRootFolder.Length != 0) hash ^= RuntimeRootFolder.GetHashCode();
      if (JvmHeapSlack != 0F) hash ^= JvmHeapSlack.GetHashCode();
      hash ^= rackNames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxNumberOfEvaluators != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxNumberOfEvaluators);
      }
      if (RuntimeRootFolder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RuntimeRootFolder);
      }
      if (JvmHeapSlack != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(JvmHeapSlack);
      }
      rackNames_.WriteTo(output, _repeated_rackNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxNumberOfEvaluators != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNumberOfEvaluators);
      }
      if (RuntimeRootFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeRootFolder);
      }
      if (JvmHeapSlack != 0F) {
        size += 1 + 4;
      }
      size += rackNames_.CalculateSize(_repeated_rackNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalRuntimeParameters other) {
      if (other == null) {
        return;
      }
      if (other.MaxNumberOfEvaluators != 0) {
        MaxNumberOfEvaluators = other.MaxNumberOfEvaluators;
      }
      if (other.RuntimeRootFolder.Length != 0) {
        RuntimeRootFolder = other.RuntimeRootFolder;
      }
      if (other.JvmHeapSlack != 0F) {
        JvmHeapSlack = other.JvmHeapSlack;
      }
      rackNames_.Add(other.rackNames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxNumberOfEvaluators = input.ReadUInt32();
            break;
          }
          case 18: {
            RuntimeRootFolder = input.ReadString();
            break;
          }
          case 29: {
            JvmHeapSlack = input.ReadFloat();
            break;
          }
          case 34: {
            rackNames_.AddEntriesFrom(input, _repeated_rackNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YarnRuntimeParameters : pb::IMessage<YarnRuntimeParameters> {
    private static readonly pb::MessageParser<YarnRuntimeParameters> _parser = new pb::MessageParser<YarnRuntimeParameters>(() => new YarnRuntimeParameters());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YarnRuntimeParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.ClientProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YarnRuntimeParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YarnRuntimeParameters(YarnRuntimeParameters other) : this() {
      queue_ = other.queue_;
      priority_ = other.priority_;
      unmangedDriver_ = other.unmangedDriver_;
      filesystemUrl_ = other.filesystemUrl_;
      jobSubmissionDirectoryPrefix_ = other.jobSubmissionDirectoryPrefix_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YarnRuntimeParameters Clone() {
      return new YarnRuntimeParameters(this);
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 1;
    private string queue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Queue {
      get { return queue_; }
      set {
        queue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "unmanged_driver" field.</summary>
    public const int UnmangedDriverFieldNumber = 3;
    private bool unmangedDriver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnmangedDriver {
      get { return unmangedDriver_; }
      set {
        unmangedDriver_ = value;
      }
    }

    /// <summary>Field number for the "filesystem_url" field.</summary>
    public const int FilesystemUrlFieldNumber = 5;
    private string filesystemUrl_ = "";
    /// <summary>
    /// providers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilesystemUrl {
      get { return filesystemUrl_; }
      set {
        filesystemUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "job_submission_directory_prefix" field.</summary>
    public const int JobSubmissionDirectoryPrefixFieldNumber = 6;
    private string jobSubmissionDirectoryPrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobSubmissionDirectoryPrefix {
      get { return jobSubmissionDirectoryPrefix_; }
      set {
        jobSubmissionDirectoryPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YarnRuntimeParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YarnRuntimeParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Queue != other.Queue) return false;
      if (Priority != other.Priority) return false;
      if (UnmangedDriver != other.UnmangedDriver) return false;
      if (FilesystemUrl != other.FilesystemUrl) return false;
      if (JobSubmissionDirectoryPrefix != other.JobSubmissionDirectoryPrefix) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Queue.Length != 0) hash ^= Queue.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (UnmangedDriver != false) hash ^= UnmangedDriver.GetHashCode();
      if (FilesystemUrl.Length != 0) hash ^= FilesystemUrl.GetHashCode();
      if (JobSubmissionDirectoryPrefix.Length != 0) hash ^= JobSubmissionDirectoryPrefix.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Queue.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Queue);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      if (UnmangedDriver != false) {
        output.WriteRawTag(24);
        output.WriteBool(UnmangedDriver);
      }
      if (FilesystemUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FilesystemUrl);
      }
      if (JobSubmissionDirectoryPrefix.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(JobSubmissionDirectoryPrefix);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Queue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Queue);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (UnmangedDriver != false) {
        size += 1 + 1;
      }
      if (FilesystemUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilesystemUrl);
      }
      if (JobSubmissionDirectoryPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobSubmissionDirectoryPrefix);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YarnRuntimeParameters other) {
      if (other == null) {
        return;
      }
      if (other.Queue.Length != 0) {
        Queue = other.Queue;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.UnmangedDriver != false) {
        UnmangedDriver = other.UnmangedDriver;
      }
      if (other.FilesystemUrl.Length != 0) {
        FilesystemUrl = other.FilesystemUrl;
      }
      if (other.JobSubmissionDirectoryPrefix.Length != 0) {
        JobSubmissionDirectoryPrefix = other.JobSubmissionDirectoryPrefix;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Queue = input.ReadString();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 24: {
            UnmangedDriver = input.ReadBool();
            break;
          }
          case 42: {
            FilesystemUrl = input.ReadString();
            break;
          }
          case 50: {
            JobSubmissionDirectoryPrefix = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AzureBatchRuntimeParameters : pb::IMessage<AzureBatchRuntimeParameters> {
    private static readonly pb::MessageParser<AzureBatchRuntimeParameters> _parser = new pb::MessageParser<AzureBatchRuntimeParameters>(() => new AzureBatchRuntimeParameters());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AzureBatchRuntimeParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.ClientProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AzureBatchRuntimeParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AzureBatchRuntimeParameters(AzureBatchRuntimeParameters other) : this() {
      azureBatchAccountName_ = other.azureBatchAccountName_;
      azureBatchAccountKey_ = other.azureBatchAccountKey_;
      azureBatchAccountUri_ = other.azureBatchAccountUri_;
      azureBatchPoolId_ = other.azureBatchPoolId_;
      azureStorageAccountName_ = other.azureStorageAccountName_;
      azureStorageAccountKey_ = other.azureStorageAccountKey_;
      azureStorageContainerName_ = other.azureStorageContainerName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AzureBatchRuntimeParameters Clone() {
      return new AzureBatchRuntimeParameters(this);
    }

    /// <summary>Field number for the "azure_batch_account_name" field.</summary>
    public const int AzureBatchAccountNameFieldNumber = 1;
    private string azureBatchAccountName_ = "";
    /// <summary>
    /// Azure Batch Account Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AzureBatchAccountName {
      get { return azureBatchAccountName_; }
      set {
        azureBatchAccountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "azure_batch_account_key" field.</summary>
    public const int AzureBatchAccountKeyFieldNumber = 2;
    private string azureBatchAccountKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AzureBatchAccountKey {
      get { return azureBatchAccountKey_; }
      set {
        azureBatchAccountKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "azure_batch_account_uri" field.</summary>
    public const int AzureBatchAccountUriFieldNumber = 3;
    private string azureBatchAccountUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AzureBatchAccountUri {
      get { return azureBatchAccountUri_; }
      set {
        azureBatchAccountUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "azure_batch_pool_id" field.</summary>
    public const int AzureBatchPoolIdFieldNumber = 4;
    private string azureBatchPoolId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AzureBatchPoolId {
      get { return azureBatchPoolId_; }
      set {
        azureBatchPoolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "azure_storage_account_name" field.</summary>
    public const int AzureStorageAccountNameFieldNumber = 10;
    private string azureStorageAccountName_ = "";
    /// <summary>
    /// Azure Storage Account Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AzureStorageAccountName {
      get { return azureStorageAccountName_; }
      set {
        azureStorageAccountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "azure_storage_account_key" field.</summary>
    public const int AzureStorageAccountKeyFieldNumber = 11;
    private string azureStorageAccountKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AzureStorageAccountKey {
      get { return azureStorageAccountKey_; }
      set {
        azureStorageAccountKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "azure_storage_container_name" field.</summary>
    public const int AzureStorageContainerNameFieldNumber = 12;
    private string azureStorageContainerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AzureStorageContainerName {
      get { return azureStorageContainerName_; }
      set {
        azureStorageContainerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AzureBatchRuntimeParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AzureBatchRuntimeParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AzureBatchAccountName != other.AzureBatchAccountName) return false;
      if (AzureBatchAccountKey != other.AzureBatchAccountKey) return false;
      if (AzureBatchAccountUri != other.AzureBatchAccountUri) return false;
      if (AzureBatchPoolId != other.AzureBatchPoolId) return false;
      if (AzureStorageAccountName != other.AzureStorageAccountName) return false;
      if (AzureStorageAccountKey != other.AzureStorageAccountKey) return false;
      if (AzureStorageContainerName != other.AzureStorageContainerName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AzureBatchAccountName.Length != 0) hash ^= AzureBatchAccountName.GetHashCode();
      if (AzureBatchAccountKey.Length != 0) hash ^= AzureBatchAccountKey.GetHashCode();
      if (AzureBatchAccountUri.Length != 0) hash ^= AzureBatchAccountUri.GetHashCode();
      if (AzureBatchPoolId.Length != 0) hash ^= AzureBatchPoolId.GetHashCode();
      if (AzureStorageAccountName.Length != 0) hash ^= AzureStorageAccountName.GetHashCode();
      if (AzureStorageAccountKey.Length != 0) hash ^= AzureStorageAccountKey.GetHashCode();
      if (AzureStorageContainerName.Length != 0) hash ^= AzureStorageContainerName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AzureBatchAccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AzureBatchAccountName);
      }
      if (AzureBatchAccountKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AzureBatchAccountKey);
      }
      if (AzureBatchAccountUri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AzureBatchAccountUri);
      }
      if (AzureBatchPoolId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AzureBatchPoolId);
      }
      if (AzureStorageAccountName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(AzureStorageAccountName);
      }
      if (AzureStorageAccountKey.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(AzureStorageAccountKey);
      }
      if (AzureStorageContainerName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AzureStorageContainerName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AzureBatchAccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AzureBatchAccountName);
      }
      if (AzureBatchAccountKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AzureBatchAccountKey);
      }
      if (AzureBatchAccountUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AzureBatchAccountUri);
      }
      if (AzureBatchPoolId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AzureBatchPoolId);
      }
      if (AzureStorageAccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AzureStorageAccountName);
      }
      if (AzureStorageAccountKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AzureStorageAccountKey);
      }
      if (AzureStorageContainerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AzureStorageContainerName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AzureBatchRuntimeParameters other) {
      if (other == null) {
        return;
      }
      if (other.AzureBatchAccountName.Length != 0) {
        AzureBatchAccountName = other.AzureBatchAccountName;
      }
      if (other.AzureBatchAccountKey.Length != 0) {
        AzureBatchAccountKey = other.AzureBatchAccountKey;
      }
      if (other.AzureBatchAccountUri.Length != 0) {
        AzureBatchAccountUri = other.AzureBatchAccountUri;
      }
      if (other.AzureBatchPoolId.Length != 0) {
        AzureBatchPoolId = other.AzureBatchPoolId;
      }
      if (other.AzureStorageAccountName.Length != 0) {
        AzureStorageAccountName = other.AzureStorageAccountName;
      }
      if (other.AzureStorageAccountKey.Length != 0) {
        AzureStorageAccountKey = other.AzureStorageAccountKey;
      }
      if (other.AzureStorageContainerName.Length != 0) {
        AzureStorageContainerName = other.AzureStorageContainerName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AzureBatchAccountName = input.ReadString();
            break;
          }
          case 18: {
            AzureBatchAccountKey = input.ReadString();
            break;
          }
          case 26: {
            AzureBatchAccountUri = input.ReadString();
            break;
          }
          case 34: {
            AzureBatchPoolId = input.ReadString();
            break;
          }
          case 82: {
            AzureStorageAccountName = input.ReadString();
            break;
          }
          case 90: {
            AzureStorageAccountKey = input.ReadString();
            break;
          }
          case 98: {
            AzureStorageContainerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MesosRuntimeParameters : pb::IMessage<MesosRuntimeParameters> {
    private static readonly pb::MessageParser<MesosRuntimeParameters> _parser = new pb::MessageParser<MesosRuntimeParameters>(() => new MesosRuntimeParameters());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MesosRuntimeParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.ClientProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MesosRuntimeParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MesosRuntimeParameters(MesosRuntimeParameters other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MesosRuntimeParameters Clone() {
      return new MesosRuntimeParameters(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MesosRuntimeParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MesosRuntimeParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MesosRuntimeParameters other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DriverClientConfiguration : pb::IMessage<DriverClientConfiguration> {
    private static readonly pb::MessageParser<DriverClientConfiguration> _parser = new pb::MessageParser<DriverClientConfiguration>(() => new DriverClientConfiguration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriverClientConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Apache.REEF.Bridge.Proto.ClientProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverClientConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverClientConfiguration(DriverClientConfiguration other) : this() {
      jobid_ = other.jobid_;
      cpuCores_ = other.cpuCores_;
      memoryMb_ = other.memoryMb_;
      driverJobSubmissionDirectory_ = other.driverJobSubmissionDirectory_;
      driverClientLaunchCommand_ = other.driverClientLaunchCommand_;
      driverRestartEnable_ = other.driverRestartEnable_;
      driverRestartEvaluatorRecoverySeconds_ = other.driverRestartEvaluatorRecoverySeconds_;
      tcpPortRangeBegin_ = other.tcpPortRangeBegin_;
      tcpPortRangeCount_ = other.tcpPortRangeCount_;
      tcpPortRangeTryCount_ = other.tcpPortRangeTryCount_;
      globalFiles_ = other.globalFiles_.Clone();
      localFiles_ = other.localFiles_.Clone();
      globalLibraries_ = other.globalLibraries_.Clone();
      localLibraries_ = other.localLibraries_.Clone();
      enableHttpDriver_ = other.enableHttpDriver_;
      operatingSystem_ = other.operatingSystem_;
      switch (other.RuntimeCase) {
        case RuntimeOneofCase.LocalRuntime:
          LocalRuntime = other.LocalRuntime.Clone();
          break;
        case RuntimeOneofCase.YarnRuntime:
          YarnRuntime = other.YarnRuntime.Clone();
          break;
        case RuntimeOneofCase.AzbatchRuntime:
          AzbatchRuntime = other.AzbatchRuntime.Clone();
          break;
        case RuntimeOneofCase.MesosRuntime:
          MesosRuntime = other.MesosRuntime.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverClientConfiguration Clone() {
      return new DriverClientConfiguration(this);
    }

    /// <summary>Field number for the "jobid" field.</summary>
    public const int JobidFieldNumber = 1;
    private string jobid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Jobid {
      get { return jobid_; }
      set {
        jobid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpu_cores" field.</summary>
    public const int CpuCoresFieldNumber = 2;
    private uint cpuCores_;
    /// <summary>
    /// driver machine resources
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CpuCores {
      get { return cpuCores_; }
      set {
        cpuCores_ = value;
      }
    }

    /// <summary>Field number for the "memory_mb" field.</summary>
    public const int MemoryMbFieldNumber = 3;
    private uint memoryMb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemoryMb {
      get { return memoryMb_; }
      set {
        memoryMb_ = value;
      }
    }

    /// <summary>Field number for the "driver_job_submission_directory" field.</summary>
    public const int DriverJobSubmissionDirectoryFieldNumber = 4;
    private string driverJobSubmissionDirectory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DriverJobSubmissionDirectory {
      get { return driverJobSubmissionDirectory_; }
      set {
        driverJobSubmissionDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_runtime" field.</summary>
    public const int LocalRuntimeFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.LocalRuntimeParameters LocalRuntime {
      get { return runtimeCase_ == RuntimeOneofCase.LocalRuntime ? (global::Org.Apache.REEF.Bridge.Proto.LocalRuntimeParameters) runtime_ : null; }
      set {
        runtime_ = value;
        runtimeCase_ = value == null ? RuntimeOneofCase.None : RuntimeOneofCase.LocalRuntime;
      }
    }

    /// <summary>Field number for the "yarn_runtime" field.</summary>
    public const int YarnRuntimeFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.YarnRuntimeParameters YarnRuntime {
      get { return runtimeCase_ == RuntimeOneofCase.YarnRuntime ? (global::Org.Apache.REEF.Bridge.Proto.YarnRuntimeParameters) runtime_ : null; }
      set {
        runtime_ = value;
        runtimeCase_ = value == null ? RuntimeOneofCase.None : RuntimeOneofCase.YarnRuntime;
      }
    }

    /// <summary>Field number for the "azbatch_runtime" field.</summary>
    public const int AzbatchRuntimeFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.AzureBatchRuntimeParameters AzbatchRuntime {
      get { return runtimeCase_ == RuntimeOneofCase.AzbatchRuntime ? (global::Org.Apache.REEF.Bridge.Proto.AzureBatchRuntimeParameters) runtime_ : null; }
      set {
        runtime_ = value;
        runtimeCase_ = value == null ? RuntimeOneofCase.None : RuntimeOneofCase.AzbatchRuntime;
      }
    }

    /// <summary>Field number for the "mesos_runtime" field.</summary>
    public const int MesosRuntimeFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.MesosRuntimeParameters MesosRuntime {
      get { return runtimeCase_ == RuntimeOneofCase.MesosRuntime ? (global::Org.Apache.REEF.Bridge.Proto.MesosRuntimeParameters) runtime_ : null; }
      set {
        runtime_ = value;
        runtimeCase_ = value == null ? RuntimeOneofCase.None : RuntimeOneofCase.MesosRuntime;
      }
    }

    /// <summary>Field number for the "driver_client_launch_command" field.</summary>
    public const int DriverClientLaunchCommandFieldNumber = 10;
    private string driverClientLaunchCommand_ = "";
    /// <summary>
    /// The command to launch the driver client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DriverClientLaunchCommand {
      get { return driverClientLaunchCommand_; }
      set {
        driverClientLaunchCommand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "driver_restart_enable" field.</summary>
    public const int DriverRestartEnableFieldNumber = 11;
    private bool driverRestartEnable_;
    /// <summary>
    /// Enable driver restart?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverRestartEnable {
      get { return driverRestartEnable_; }
      set {
        driverRestartEnable_ = value;
      }
    }

    /// <summary>Field number for the "driver_restart_evaluator_recovery_seconds" field.</summary>
    public const int DriverRestartEvaluatorRecoverySecondsFieldNumber = 12;
    private uint driverRestartEvaluatorRecoverySeconds_;
    /// <summary>
    /// Driver restart evaluator recovery seconds (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DriverRestartEvaluatorRecoverySeconds {
      get { return driverRestartEvaluatorRecoverySeconds_; }
      set {
        driverRestartEvaluatorRecoverySeconds_ = value;
      }
    }

    /// <summary>Field number for the "tcp_port_range_begin" field.</summary>
    public const int TcpPortRangeBeginFieldNumber = 15;
    private uint tcpPortRangeBegin_;
    /// <summary>
    /// TCP port range
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpPortRangeBegin {
      get { return tcpPortRangeBegin_; }
      set {
        tcpPortRangeBegin_ = value;
      }
    }

    /// <summary>Field number for the "tcp_port_range_count" field.</summary>
    public const int TcpPortRangeCountFieldNumber = 16;
    private uint tcpPortRangeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpPortRangeCount {
      get { return tcpPortRangeCount_; }
      set {
        tcpPortRangeCount_ = value;
      }
    }

    /// <summary>Field number for the "tcp_port_range_try_count" field.</summary>
    public const int TcpPortRangeTryCountFieldNumber = 17;
    private uint tcpPortRangeTryCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpPortRangeTryCount {
      get { return tcpPortRangeTryCount_; }
      set {
        tcpPortRangeTryCount_ = value;
      }
    }

    /// <summary>Field number for the "global_files" field.</summary>
    public const int GlobalFilesFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _repeated_globalFiles_codec
        = pb::FieldCodec.ForString(162);
    private readonly pbc::RepeatedField<string> globalFiles_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// file dependencies
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GlobalFiles {
      get { return globalFiles_; }
    }

    /// <summary>Field number for the "local_files" field.</summary>
    public const int LocalFilesFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _repeated_localFiles_codec
        = pb::FieldCodec.ForString(170);
    private readonly pbc::RepeatedField<string> localFiles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LocalFiles {
      get { return localFiles_; }
    }

    /// <summary>Field number for the "global_libraries" field.</summary>
    public const int GlobalLibrariesFieldNumber = 22;
    private static readonly pb::FieldCodec<string> _repeated_globalLibraries_codec
        = pb::FieldCodec.ForString(178);
    private readonly pbc::RepeatedField<string> globalLibraries_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GlobalLibraries {
      get { return globalLibraries_; }
    }

    /// <summary>Field number for the "local_libraries" field.</summary>
    public const int LocalLibrariesFieldNumber = 23;
    private static readonly pb::FieldCodec<string> _repeated_localLibraries_codec
        = pb::FieldCodec.ForString(186);
    private readonly pbc::RepeatedField<string> localLibraries_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LocalLibraries {
      get { return localLibraries_; }
    }

    /// <summary>Field number for the "enable_http_driver" field.</summary>
    public const int EnableHttpDriverFieldNumber = 25;
    private bool enableHttpDriver_;
    /// <summary>
    /// enable http driver
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableHttpDriver {
      get { return enableHttpDriver_; }
      set {
        enableHttpDriver_ = value;
      }
    }

    /// <summary>Field number for the "operating_system" field.</summary>
    public const int OperatingSystemFieldNumber = 30;
    private global::Org.Apache.REEF.Bridge.Proto.DriverClientConfiguration.Types.OS operatingSystem_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Apache.REEF.Bridge.Proto.DriverClientConfiguration.Types.OS OperatingSystem {
      get { return operatingSystem_; }
      set {
        operatingSystem_ = value;
      }
    }

    private object runtime_;
    /// <summary>Enum of possible cases for the "runtime" oneof.</summary>
    public enum RuntimeOneofCase {
      None = 0,
      LocalRuntime = 5,
      YarnRuntime = 6,
      AzbatchRuntime = 7,
      MesosRuntime = 8,
    }
    private RuntimeOneofCase runtimeCase_ = RuntimeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeOneofCase RuntimeCase {
      get { return runtimeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRuntime() {
      runtimeCase_ = RuntimeOneofCase.None;
      runtime_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriverClientConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriverClientConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Jobid != other.Jobid) return false;
      if (CpuCores != other.CpuCores) return false;
      if (MemoryMb != other.MemoryMb) return false;
      if (DriverJobSubmissionDirectory != other.DriverJobSubmissionDirectory) return false;
      if (!object.Equals(LocalRuntime, other.LocalRuntime)) return false;
      if (!object.Equals(YarnRuntime, other.YarnRuntime)) return false;
      if (!object.Equals(AzbatchRuntime, other.AzbatchRuntime)) return false;
      if (!object.Equals(MesosRuntime, other.MesosRuntime)) return false;
      if (DriverClientLaunchCommand != other.DriverClientLaunchCommand) return false;
      if (DriverRestartEnable != other.DriverRestartEnable) return false;
      if (DriverRestartEvaluatorRecoverySeconds != other.DriverRestartEvaluatorRecoverySeconds) return false;
      if (TcpPortRangeBegin != other.TcpPortRangeBegin) return false;
      if (TcpPortRangeCount != other.TcpPortRangeCount) return false;
      if (TcpPortRangeTryCount != other.TcpPortRangeTryCount) return false;
      if(!globalFiles_.Equals(other.globalFiles_)) return false;
      if(!localFiles_.Equals(other.localFiles_)) return false;
      if(!globalLibraries_.Equals(other.globalLibraries_)) return false;
      if(!localLibraries_.Equals(other.localLibraries_)) return false;
      if (EnableHttpDriver != other.EnableHttpDriver) return false;
      if (OperatingSystem != other.OperatingSystem) return false;
      if (RuntimeCase != other.RuntimeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Jobid.Length != 0) hash ^= Jobid.GetHashCode();
      if (CpuCores != 0) hash ^= CpuCores.GetHashCode();
      if (MemoryMb != 0) hash ^= MemoryMb.GetHashCode();
      if (DriverJobSubmissionDirectory.Length != 0) hash ^= DriverJobSubmissionDirectory.GetHashCode();
      if (runtimeCase_ == RuntimeOneofCase.LocalRuntime) hash ^= LocalRuntime.GetHashCode();
      if (runtimeCase_ == RuntimeOneofCase.YarnRuntime) hash ^= YarnRuntime.GetHashCode();
      if (runtimeCase_ == RuntimeOneofCase.AzbatchRuntime) hash ^= AzbatchRuntime.GetHashCode();
      if (runtimeCase_ == RuntimeOneofCase.MesosRuntime) hash ^= MesosRuntime.GetHashCode();
      if (DriverClientLaunchCommand.Length != 0) hash ^= DriverClientLaunchCommand.GetHashCode();
      if (DriverRestartEnable != false) hash ^= DriverRestartEnable.GetHashCode();
      if (DriverRestartEvaluatorRecoverySeconds != 0) hash ^= DriverRestartEvaluatorRecoverySeconds.GetHashCode();
      if (TcpPortRangeBegin != 0) hash ^= TcpPortRangeBegin.GetHashCode();
      if (TcpPortRangeCount != 0) hash ^= TcpPortRangeCount.GetHashCode();
      if (TcpPortRangeTryCount != 0) hash ^= TcpPortRangeTryCount.GetHashCode();
      hash ^= globalFiles_.GetHashCode();
      hash ^= localFiles_.GetHashCode();
      hash ^= globalLibraries_.GetHashCode();
      hash ^= localLibraries_.GetHashCode();
      if (EnableHttpDriver != false) hash ^= EnableHttpDriver.GetHashCode();
      if (OperatingSystem != 0) hash ^= OperatingSystem.GetHashCode();
      hash ^= (int) runtimeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Jobid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Jobid);
      }
      if (CpuCores != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CpuCores);
      }
      if (MemoryMb != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MemoryMb);
      }
      if (DriverJobSubmissionDirectory.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DriverJobSubmissionDirectory);
      }
      if (runtimeCase_ == RuntimeOneofCase.LocalRuntime) {
        output.WriteRawTag(42);
        output.WriteMessage(LocalRuntime);
      }
      if (runtimeCase_ == RuntimeOneofCase.YarnRuntime) {
        output.WriteRawTag(50);
        output.WriteMessage(YarnRuntime);
      }
      if (runtimeCase_ == RuntimeOneofCase.AzbatchRuntime) {
        output.WriteRawTag(58);
        output.WriteMessage(AzbatchRuntime);
      }
      if (runtimeCase_ == RuntimeOneofCase.MesosRuntime) {
        output.WriteRawTag(66);
        output.WriteMessage(MesosRuntime);
      }
      if (DriverClientLaunchCommand.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DriverClientLaunchCommand);
      }
      if (DriverRestartEnable != false) {
        output.WriteRawTag(88);
        output.WriteBool(DriverRestartEnable);
      }
      if (DriverRestartEvaluatorRecoverySeconds != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(DriverRestartEvaluatorRecoverySeconds);
      }
      if (TcpPortRangeBegin != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(TcpPortRangeBegin);
      }
      if (TcpPortRangeCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(TcpPortRangeCount);
      }
      if (TcpPortRangeTryCount != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(TcpPortRangeTryCount);
      }
      globalFiles_.WriteTo(output, _repeated_globalFiles_codec);
      localFiles_.WriteTo(output, _repeated_localFiles_codec);
      globalLibraries_.WriteTo(output, _repeated_globalLibraries_codec);
      localLibraries_.WriteTo(output, _repeated_localLibraries_codec);
      if (EnableHttpDriver != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(EnableHttpDriver);
      }
      if (OperatingSystem != 0) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) OperatingSystem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Jobid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Jobid);
      }
      if (CpuCores != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CpuCores);
      }
      if (MemoryMb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemoryMb);
      }
      if (DriverJobSubmissionDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DriverJobSubmissionDirectory);
      }
      if (runtimeCase_ == RuntimeOneofCase.LocalRuntime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalRuntime);
      }
      if (runtimeCase_ == RuntimeOneofCase.YarnRuntime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YarnRuntime);
      }
      if (runtimeCase_ == RuntimeOneofCase.AzbatchRuntime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AzbatchRuntime);
      }
      if (runtimeCase_ == RuntimeOneofCase.MesosRuntime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MesosRuntime);
      }
      if (DriverClientLaunchCommand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DriverClientLaunchCommand);
      }
      if (DriverRestartEnable != false) {
        size += 1 + 1;
      }
      if (DriverRestartEvaluatorRecoverySeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DriverRestartEvaluatorRecoverySeconds);
      }
      if (TcpPortRangeBegin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpPortRangeBegin);
      }
      if (TcpPortRangeCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpPortRangeCount);
      }
      if (TcpPortRangeTryCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpPortRangeTryCount);
      }
      size += globalFiles_.CalculateSize(_repeated_globalFiles_codec);
      size += localFiles_.CalculateSize(_repeated_localFiles_codec);
      size += globalLibraries_.CalculateSize(_repeated_globalLibraries_codec);
      size += localLibraries_.CalculateSize(_repeated_localLibraries_codec);
      if (EnableHttpDriver != false) {
        size += 2 + 1;
      }
      if (OperatingSystem != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OperatingSystem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriverClientConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Jobid.Length != 0) {
        Jobid = other.Jobid;
      }
      if (other.CpuCores != 0) {
        CpuCores = other.CpuCores;
      }
      if (other.MemoryMb != 0) {
        MemoryMb = other.MemoryMb;
      }
      if (other.DriverJobSubmissionDirectory.Length != 0) {
        DriverJobSubmissionDirectory = other.DriverJobSubmissionDirectory;
      }
      if (other.DriverClientLaunchCommand.Length != 0) {
        DriverClientLaunchCommand = other.DriverClientLaunchCommand;
      }
      if (other.DriverRestartEnable != false) {
        DriverRestartEnable = other.DriverRestartEnable;
      }
      if (other.DriverRestartEvaluatorRecoverySeconds != 0) {
        DriverRestartEvaluatorRecoverySeconds = other.DriverRestartEvaluatorRecoverySeconds;
      }
      if (other.TcpPortRangeBegin != 0) {
        TcpPortRangeBegin = other.TcpPortRangeBegin;
      }
      if (other.TcpPortRangeCount != 0) {
        TcpPortRangeCount = other.TcpPortRangeCount;
      }
      if (other.TcpPortRangeTryCount != 0) {
        TcpPortRangeTryCount = other.TcpPortRangeTryCount;
      }
      globalFiles_.Add(other.globalFiles_);
      localFiles_.Add(other.localFiles_);
      globalLibraries_.Add(other.globalLibraries_);
      localLibraries_.Add(other.localLibraries_);
      if (other.EnableHttpDriver != false) {
        EnableHttpDriver = other.EnableHttpDriver;
      }
      if (other.OperatingSystem != 0) {
        OperatingSystem = other.OperatingSystem;
      }
      switch (other.RuntimeCase) {
        case RuntimeOneofCase.LocalRuntime:
          if (LocalRuntime == null) {
            LocalRuntime = new global::Org.Apache.REEF.Bridge.Proto.LocalRuntimeParameters();
          }
          LocalRuntime.MergeFrom(other.LocalRuntime);
          break;
        case RuntimeOneofCase.YarnRuntime:
          if (YarnRuntime == null) {
            YarnRuntime = new global::Org.Apache.REEF.Bridge.Proto.YarnRuntimeParameters();
          }
          YarnRuntime.MergeFrom(other.YarnRuntime);
          break;
        case RuntimeOneofCase.AzbatchRuntime:
          if (AzbatchRuntime == null) {
            AzbatchRuntime = new global::Org.Apache.REEF.Bridge.Proto.AzureBatchRuntimeParameters();
          }
          AzbatchRuntime.MergeFrom(other.AzbatchRuntime);
          break;
        case RuntimeOneofCase.MesosRuntime:
          if (MesosRuntime == null) {
            MesosRuntime = new global::Org.Apache.REEF.Bridge.Proto.MesosRuntimeParameters();
          }
          MesosRuntime.MergeFrom(other.MesosRuntime);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Jobid = input.ReadString();
            break;
          }
          case 16: {
            CpuCores = input.ReadUInt32();
            break;
          }
          case 24: {
            MemoryMb = input.ReadUInt32();
            break;
          }
          case 34: {
            DriverJobSubmissionDirectory = input.ReadString();
            break;
          }
          case 42: {
            global::Org.Apache.REEF.Bridge.Proto.LocalRuntimeParameters subBuilder = new global::Org.Apache.REEF.Bridge.Proto.LocalRuntimeParameters();
            if (runtimeCase_ == RuntimeOneofCase.LocalRuntime) {
              subBuilder.MergeFrom(LocalRuntime);
            }
            input.ReadMessage(subBuilder);
            LocalRuntime = subBuilder;
            break;
          }
          case 50: {
            global::Org.Apache.REEF.Bridge.Proto.YarnRuntimeParameters subBuilder = new global::Org.Apache.REEF.Bridge.Proto.YarnRuntimeParameters();
            if (runtimeCase_ == RuntimeOneofCase.YarnRuntime) {
              subBuilder.MergeFrom(YarnRuntime);
            }
            input.ReadMessage(subBuilder);
            YarnRuntime = subBuilder;
            break;
          }
          case 58: {
            global::Org.Apache.REEF.Bridge.Proto.AzureBatchRuntimeParameters subBuilder = new global::Org.Apache.REEF.Bridge.Proto.AzureBatchRuntimeParameters();
            if (runtimeCase_ == RuntimeOneofCase.AzbatchRuntime) {
              subBuilder.MergeFrom(AzbatchRuntime);
            }
            input.ReadMessage(subBuilder);
            AzbatchRuntime = subBuilder;
            break;
          }
          case 66: {
            global::Org.Apache.REEF.Bridge.Proto.MesosRuntimeParameters subBuilder = new global::Org.Apache.REEF.Bridge.Proto.MesosRuntimeParameters();
            if (runtimeCase_ == RuntimeOneofCase.MesosRuntime) {
              subBuilder.MergeFrom(MesosRuntime);
            }
            input.ReadMessage(subBuilder);
            MesosRuntime = subBuilder;
            break;
          }
          case 82: {
            DriverClientLaunchCommand = input.ReadString();
            break;
          }
          case 88: {
            DriverRestartEnable = input.ReadBool();
            break;
          }
          case 96: {
            DriverRestartEvaluatorRecoverySeconds = input.ReadUInt32();
            break;
          }
          case 120: {
            TcpPortRangeBegin = input.ReadUInt32();
            break;
          }
          case 128: {
            TcpPortRangeCount = input.ReadUInt32();
            break;
          }
          case 136: {
            TcpPortRangeTryCount = input.ReadUInt32();
            break;
          }
          case 162: {
            globalFiles_.AddEntriesFrom(input, _repeated_globalFiles_codec);
            break;
          }
          case 170: {
            localFiles_.AddEntriesFrom(input, _repeated_localFiles_codec);
            break;
          }
          case 178: {
            globalLibraries_.AddEntriesFrom(input, _repeated_globalLibraries_codec);
            break;
          }
          case 186: {
            localLibraries_.AddEntriesFrom(input, _repeated_localLibraries_codec);
            break;
          }
          case 200: {
            EnableHttpDriver = input.ReadBool();
            break;
          }
          case 240: {
            operatingSystem_ = (global::Org.Apache.REEF.Bridge.Proto.DriverClientConfiguration.Types.OS) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DriverClientConfiguration message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// General information
      /// </summary>
      public enum OS {
        [pbr::OriginalName("WINDOWS")] Windows = 0,
        [pbr::OriginalName("LINUX")] Linux = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
